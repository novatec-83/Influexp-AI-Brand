{"version":3,"sources":["webpack:///./src/app/userdashboard-template/userdashboard-template.component.html","webpack:///./src/app/userdashboard-template/userdashboard-template.component.scss","webpack:///./src/app/userdashboard-template/userdashboard-template.component.ts","webpack:///./src/app/userdashboard-template/userdashboard.module.ts","webpack:///./src/app/userdashboard-template/userdashboard.routing.ts"],"names":[],"mappings":"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","file":"userdashboard-template-userdashboard-module.js","sourcesContent":["module.exports = \"\\r\\n<!--<div *ngIf=\\\"loaded\\\">-->\\r\\n<div class=\\\"page-content\\\">\\r\\n    <div class=\\\"container-fluid padding-zero\\\">\\r\\n        <mat-tab-group (selectedIndexChange)=\\\"selectedIndexChange($event)\\\" style=\\\"background: #ffffff; -webkit-box-shadow: 0 3px 5px 0 rgba(0,0,0,.5),0 6px 20px 0 rgba(0,0,0,.19)!important;\\r\\n    box-shadow: 0 3px 5px 0 rgba(0,0,0,.5),0 6px 20px 0 rgba(0,0,0,.19)!important; \\\"\\r\\n                      [selectedIndex]=\\\"selectedIndex\\\">\\r\\n\\r\\n\\r\\n            <mat-tab class=\\\"font-icon font-icon-page\\\" label=\\\"Web\\\" style=\\\"margin: 0 auto\\\">\\r\\n                <ng-template mat-tab-label style=\\\"background: white\\\">\\r\\n                          <span class=\\\"nav-link-in-dash\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fa fa-globe\\\"></i>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tWeb\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n                </ng-template>\\r\\n                <br>\\r\\n                <div>\\r\\n                    <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"margin: 0 auto; width: 90%\\\">\\r\\n                        <div class=\\\"row header\\\">\\r\\n                            <div class=\\\"col-sm-12\\\">\\r\\n                                <div class=\\\"row\\\">\\r\\n                                    <div class=\\\"col-md-6\\\">\\r\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\r\\n                                        </span>\\r\\n                                    </div>\\r\\n                                    <div class=\\\"col-md-6\\\">\\r\\n                                        <div class=\\\"row\\\">\\r\\n                                            <div class=\\\"col-md-8 col-sm-8 pull-right\\\">\\r\\n                                                <!-- <mat-select (change)=\\\"sort_lists()\\\" name=\\\"selected_choice\\\" [(ngModel)]=\\\"selected_choice\\\"\\r\\n                                                           placeholder=\\\"Sort By\\\" style=\\\"width: 60%; float: right\\\">\\r\\n                                                    <mat-option *ngFor=\\\"let choice of blog_choices\\\" [value]=\\\"choice.code\\\">{{ choice.name }}</mat-option>\\r\\n                                                </mat-select> -->\\r\\n                                                <mat-form-field class=\\\"w-100\\\">\\r\\n                                                    <mat-label>Sort By</mat-label>\\r\\n                                                    <mat-select  (change)=\\\"sort_lists()\\\" name=\\\"selected_choice\\\" [(ngModel)]=\\\"selected_choice\\\">\\r\\n                                                      <mat-option *ngFor=\\\"let choice of blog_choices\\\" [value]=\\\"choice.code\\\">\\r\\n                                                        {{ choice.name }}\\r\\n                                                      </mat-option>\\r\\n                                                    </mat-select>\\r\\n                                                  </mat-form-field>\\r\\n                                            </div>\\r\\n                                            <div class=\\\"col-md-4 col-sm-4 pull-right\\\">\\r\\n                                                <button type=\\\"button\\\" class=\\\"btn btn-priamry crete-list-button\\\" (click)=\\\"create_empty_list()\\\">\\r\\n                                                    Create List\\r\\n                                                </button>\\r\\n                                            </div>\\r\\n\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <!--<div class=\\\"sh-n-table row\\\" >-->\\r\\n                            <!--<table>-->\\r\\n                                <!--<thead>-->\\r\\n                                <!--<tr>-->\\r\\n                                    <!--<th>List Name</th>-->\\r\\n                                    <!--<th>Total Influencers</th>-->\\r\\n                                    <!--<th>Add Influencers</th>-->\\r\\n                                    <!--<th>Edit</th>-->\\r\\n                                    <!--<th>Email</th>-->\\r\\n                                    <!--<th>Delete</th>-->\\r\\n                                <!--</tr>-->\\r\\n                                <!--</thead>-->\\r\\n                                <!--<tbody >-->\\r\\n                                <!--<tr *ngFor=\\\"let li of user_lists_web;let i=index\\\">-->\\r\\n                                    <!--<td >-->\\r\\n                                        <!--<a style=\\\"font-size: 17px;\\\" (click)=\\\"go_to_list(li.id,li.name)\\\">-->\\r\\n                                        <!--{{li.name }}-->\\r\\n                                        <!--</a>-->\\r\\n                                    <!--</td>-->\\r\\n                                    <!--<td >-->\\r\\n                                        <!--<span class=\\\"block-ellipsis\\\"> {{li.influencers_count}}</span>-->\\r\\n                                    <!--</td>-->\\r\\n                                    <!--<td title=\\\"Click to add influencers in this list\\\">-->\\r\\n                                        <!--<a (click)=\\\"select_add_influencers(li.id, li.name)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-plus\\\" ></i>-->\\r\\n\\r\\n                                        <!--</a>-->\\r\\n                                    <!--</td>-->\\r\\n                                    <!--<td  title=\\\"Click to Edit this list\\\">-->\\r\\n                                        <!--<a (click)=\\\"go_to_list(li.id,li.name)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-pencil\\\" ></i>-->\\r\\n                                        <!--</a>-->\\r\\n                                    <!--</td>-->\\r\\n                                    <!--<td title=\\\"Click to Email this Infleuncer\\\">-->\\r\\n                                        <!--<a (click)=\\\"email_list(li.id,li.name)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-envelope\\\" ></i>-->\\r\\n                                        <!--</a>-->\\r\\n                                    <!--</td>-->\\r\\n                                    <!--<td title=\\\"Click to Delete this influencer\\\">-->\\r\\n                                        <!--<a (click)=\\\"delete_list(li.id)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-trash\\\" ></i>-->\\r\\n                                        <!--</a>-->\\r\\n                                    <!--</td>-->\\r\\n                                <!--</tr>-->\\r\\n                                <!--</tbody>-->\\r\\n                            <!--</table>-->\\r\\n                        <!--</div>-->\\r\\n\\r\\n\\r\\n                        <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\r\\n                        <!--<div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>-->\\r\\n\\r\\n                        <div class=\\\"sortable\\\">\\r\\n                        <section class=\\\"box-typical task-card task\\\">\\r\\n                        <div class=\\\"task-card-photo\\\">\\r\\n                        <!--<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">-->\\r\\n                        </div>\\r\\n                        <div class=\\\"task-card-in\\\">\\r\\n                        <!--<input type=\\\"checkbox\\\" style=\\\"zoom: 1.5\\\">-->\\r\\n                        <!--<div class=\\\"btn-group task-card-menu\\\">-->\\r\\n                        <!--<button type=\\\"button\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\"-->\\r\\n                        <!--aria-expanded=\\\"false\\\">-->\\r\\n                        <!--<i class=\\\"font-icon-dots-vert-square\\\"></i>-->\\r\\n                        <!--</button>-->\\r\\n                        <!--<div class=\\\"dropdown-menu dropdown-menu-right\\\">-->\\r\\n                        <!--<a class=\\\"dropdown-item\\\" (click)=\\\"go_to_list(li.id,li.name)\\\"><i-->\\r\\n                        <!--class=\\\"font-icon font-icon-pencil\\\"></i>Edit</a>-->\\r\\n                        <!--<a class=\\\"dropdown-item\\\" (click)=\\\"email_list(li.id,li.name)\\\"><i-->\\r\\n                        <!--class=\\\"font-icon font-icon-mail\\\"></i>Email</a>-->\\r\\n                        <!--&lt;!&ndash;<a class=\\\"dropdown-item\\\" href=\\\"#\\\"><i class=\\\"font-icon font-icon-archive\\\"></i>Archive</a>&ndash;&gt;-->\\r\\n                        <!--<a class=\\\"dropdown-item\\\" (click)=\\\"delete_list(li.id)\\\"><i-->\\r\\n                        <!--class=\\\"font-icon font-icon-trash\\\"></i>Delete</a>-->\\r\\n                        <!--</div>-->\\r\\n                        <!--</div>-->\\r\\n                            <div class=\\\"task-card-title-label text-center\\\">\\r\\n                                <h5 style=\\\"font-weight: bolder\\\">{{li.name}}</h5>\\r\\n                            </div>\\r\\n                        <div class=\\\"task-card-title text-center\\\">\\r\\n                        <!--<div class=\\\"button__holder\\\">-->\\r\\n                            <!--<button class=\\\"plus\\\"-->\\r\\n                        <!--(click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>-->\\r\\n                        <!--</div>-->\\r\\n                            <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\r\\n                            <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"select_add_influencers(li.id, li.name) \\\">\\r\\n                                Add Influencers\\r\\n                            </button>\\r\\n                        </div>\\r\\n\\r\\n                        </div>\\r\\n                        <div class=\\\"task-card-footer\\\">\\r\\n                        <!--<div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>-->\\r\\n                        <!-- <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list(li.id, li.name)\\\">\\r\\n                            <i class=\\\"fa  fa-edit\\\"></i>\\r\\n                        </div> -->\\r\\n                            <!--<div class=\\\"task-card-meta-item\\\" title=\\\"Click to Email\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">-->\\r\\n                                <!--<i class=\\\"fab fa-envelope\\\"></i>-->\\r\\n                            <!--</div>-->\\r\\n                            <!--<div class=\\\"task-card-meta-item text-right\\\" title=\\\"Click to Delete\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">-->\\r\\n                                <!---->\\r\\n                            <!--</div>-->\\r\\n                        <div class=\\\"avatar-preview avatar-preview-32\\\">\\r\\n                            <i class=\\\"fa fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_list(li.id, li.name)\\\"></i>\\r\\n                        </div>\\r\\n                        </div>\\r\\n                        </section>\\r\\n                        </div>\\r\\n                        </div>\\r\\n                        <!--</section>&lt;!&ndash;.task-card&ndash;&gt;-->\\r\\n\\r\\n\\r\\n                        <!--</div>-->\\r\\n                        <!--</div>&lt;!&ndash;.tasks-grid-col&ndash;&gt;-->\\r\\n                    </div><!--.tasks-grid-->\\r\\n\\r\\n                </div><!--.tab-pane-->\\r\\n            </mat-tab>\\r\\n            <mat-tab label=\\\"Twitter\\\">\\r\\n                <ng-template mat-tab-label>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\\"nav-link-in-dash\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fab fa-twitter\\\"></i>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTwitter\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\r\\n                </ng-template>\\r\\n                <br>\\r\\n\\r\\n                <div>\\r\\n                    <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"margin: 0 auto; width: 90%\\\">\\r\\n                        <div class=\\\"row header\\\">\\r\\n                            <div class=\\\"col-sm-12\\\">\\r\\n                                <div class=\\\"row\\\">\\r\\n                                    <div class=\\\"col-md-6\\\">\\r\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\r\\n                                        </span>\\r\\n                                    </div>\\r\\n                                    <div class=\\\"col-md-6\\\">\\r\\n                                        <div class=\\\"row\\\">\\r\\n                                            <div class=\\\"col-md-8 col-sm-6 pull-right\\\">\\r\\n                                                <mat-select style=\\\"width:60%; float: right\\\" (change)=\\\"sort_lists_twitter()\\\" name=\\\"selected_choice\\\"\\r\\n                                                           [(ngModel)]=\\\"selected_choice_twitter\\\"\\r\\n                                                           placeholder=\\\"Sort By\\\">\\r\\n                                                    <mat-option *ngFor=\\\"let choice of choices_twitter\\\" [value]=\\\"choice.code\\\">{{ choice.name }}\\r\\n                                                    </mat-option>\\r\\n                                                </mat-select>\\r\\n                                            </div>\\r\\n                                            <div class=\\\"col-md-4 col-sm-6 pull-right\\\">\\r\\n                                                <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"create_empty_list_twitter()\\\">\\r\\n                                                    Create List\\r\\n                                                </button>\\r\\n                                            </div>\\r\\n\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                        <!--<div class=\\\"sh-n-table row\\\" >-->\\r\\n                            <!--<table>-->\\r\\n                                <!--<thead>-->\\r\\n                                <!--<tr>-->\\r\\n                                    <!--<th>List Name</th>-->\\r\\n                                    <!--<th>Total Influencers</th>-->\\r\\n                                    <!--<th>Add Influencers</th>-->\\r\\n                                    <!--<th>Edit</th>-->\\r\\n                                    <!--<th>Email</th>-->\\r\\n                                    <!--<th>Delete</th>-->\\r\\n                                <!--</tr>-->\\r\\n                                <!--</thead>-->\\r\\n                                <!--<tbody >-->\\r\\n                                <!--<tr *ngFor=\\\"let li of user_lists.results;let i=index\\\">-->\\r\\n                                    <!--<td>-->\\r\\n                                        <!--<a style=\\\"font-size: 17px;\\\" (click)=\\\"go_to_list_twitter(li.id,li.name)\\\">-->\\r\\n                                            <!--{{li.name }}-->\\r\\n                                        <!--</a>-->\\r\\n                                    <!--</td>-->\\r\\n                                    <!--<td >-->\\r\\n                                        <!--<span class=\\\"block-ellipsis\\\"> {{li.influencers_count}}</span>-->\\r\\n                                    <!--</td>-->\\r\\n                                    <!--<td title=\\\"Click to add influencers in this list\\\">-->\\r\\n                                        <!--<a (click)=\\\"select_add_influencers_twitter(li.id,li.name)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-plus\\\" ></i>-->\\r\\n\\r\\n                                        <!--</a>-->\\r\\n                                    <!--</td>-->\\r\\n                                    <!--<td  title=\\\"Click to Edit this list\\\">-->\\r\\n                                        <!--<a (click)=\\\"go_to_list_twitter(li.id,li.name)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-pencil\\\" ></i>-->\\r\\n                                        <!--</a>-->\\r\\n                                    <!--</td>-->\\r\\n                                    <!--<td title=\\\"Click to Email this Infleuncer\\\">-->\\r\\n                                        <!--<a (click)=\\\"email_list_twitter(li.id,li.name)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-envelope\\\" ></i>-->\\r\\n                                        <!--</a>-->\\r\\n                                    <!--</td>-->\\r\\n                                    <!--<td title=\\\"Click to Delete this influencer\\\">-->\\r\\n                                        <!--<a (click)=\\\"delete_list_twitter(li.id)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-trash\\\" ></i>-->\\r\\n                                        <!--</a>-->\\r\\n                                    <!--</td>-->\\r\\n                                <!--</tr>-->\\r\\n                                <!--</tbody>-->\\r\\n                            <!--</table>-->\\r\\n                        <!--</div>-->\\r\\n\\r\\n\\r\\n                        <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\r\\n                            <!--<div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>-->\\r\\n\\r\\n                            <div class=\\\"sortable\\\">\\r\\n                                <section class=\\\"box-typical task-card task\\\">\\r\\n                                    <div class=\\\"task-card-photo\\\">\\r\\n                                        <!--<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">-->\\r\\n                                    </div>\\r\\n                                    <div class=\\\"task-card-in\\\">\\r\\n                                        <!--<input type=\\\"checkbox\\\" style=\\\"zoom: 1.5\\\">-->\\r\\n                                        <!--<div class=\\\"btn-group task-card-menu\\\">-->\\r\\n                                        <!--<button type=\\\"button\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\"-->\\r\\n                                        <!--aria-expanded=\\\"false\\\">-->\\r\\n                                        <!--<i class=\\\"font-icon-dots-vert-square\\\"></i>-->\\r\\n                                        <!--</button>-->\\r\\n                                        <!--<div class=\\\"dropdown-menu dropdown-menu-right\\\">-->\\r\\n                                        <!--<a class=\\\"dropdown-item\\\" (click)=\\\"go_to_list(li.id,li.name)\\\"><i-->\\r\\n                                        <!--class=\\\"font-icon font-icon-pencil\\\"></i>Edit</a>-->\\r\\n                                        <!--<a class=\\\"dropdown-item\\\" (click)=\\\"email_list(li.id,li.name)\\\"><i-->\\r\\n                                        <!--class=\\\"font-icon font-icon-mail\\\"></i>Email</a>-->\\r\\n                                        <!--&lt;!&ndash;<a class=\\\"dropdown-item\\\" href=\\\"#\\\"><i class=\\\"font-icon font-icon-archive\\\"></i>Archive</a>&ndash;&gt;-->\\r\\n                                        <!--<a class=\\\"dropdown-item\\\" (click)=\\\"delete_list(li.id)\\\"><i-->\\r\\n                                        <!--class=\\\"font-icon font-icon-trash\\\"></i>Delete</a>-->\\r\\n                                        <!--</div>-->\\r\\n                                        <!--</div>-->\\r\\n                                        <div class=\\\"task-card-title-label text-center\\\">\\r\\n                                            <h5 style=\\\"font-weight: bolder\\\">{{li.name}}</h5>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"task-card-title text-center\\\">\\r\\n                                            <!--<div class=\\\"button__holder\\\">-->\\r\\n                                            <!--<button class=\\\"plus\\\"-->\\r\\n                                            <!--(click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>-->\\r\\n                                            <!--</div>-->\\r\\n                                            <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\r\\n                                            <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"select_add_influencers_twitter(li.id, li.name) \\\">\\r\\n                                                Add Influencers\\r\\n                                            </button>\\r\\n                                        </div>\\r\\n\\r\\n                                    </div>\\r\\n                                    <div class=\\\"task-card-footer\\\">\\r\\n                                        <!--<div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>-->\\r\\n                                        <!-- <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_twitter(li.id, li.name)\\\">\\r\\n                                            <i class=\\\"fa fa-edit\\\"></i>\\r\\n                                        </div> -->\\r\\n                                        <!--<div class=\\\"task-card-meta-item\\\" title=\\\"Click to Email\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list_twitter(li.id, li.name)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-envelope\\\"></i>-->\\r\\n                                        <!--</div>-->\\r\\n                                        <!--<div class=\\\"task-card-meta-item text-right\\\" title=\\\"Click to Delete\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">-->\\r\\n                                        <!---->\\r\\n                                        <!--</div>-->\\r\\n                                        <div class=\\\"avatar-preview avatar-preview-32\\\">\\r\\n                                            <i class=\\\"fa fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_list_twitter(li.id, li.name)\\\"></i>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </section>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                        <!--<div *ngFor=\\\"let li of user_lists.results; let i = index\\\"-->\\r\\n                        <!--[ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col purple': i%2===0, 'tasks-grid-col green': i%1===0}\\\">-->\\r\\n                        <!--&lt;!&ndash;<div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>&ndash;&gt;-->\\r\\n\\r\\n                        <!--<div class=\\\"sortable\\\">-->\\r\\n                        <!--<section class=\\\"box-typical task-card task\\\">-->\\r\\n                        <!--<div class=\\\"task-card-photo\\\">-->\\r\\n                        <!--&lt;!&ndash;<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">&ndash;&gt;-->\\r\\n                        <!--</div>-->\\r\\n                        <!--<div class=\\\"task-card-in\\\">-->\\r\\n                        <!--<div class=\\\"btn-group task-card-menu\\\">-->\\r\\n                        <!--<button type=\\\"button\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\"-->\\r\\n                        <!--aria-expanded=\\\"false\\\">-->\\r\\n                        <!--<i class=\\\"font-icon-dots-vert-square\\\"></i>-->\\r\\n                        <!--</button>-->\\r\\n                        <!--<div class=\\\"dropdown-menu dropdown-menu-right\\\">-->\\r\\n                        <!--<a class=\\\"dropdown-item\\\" (click)=\\\"go_to_list_twitter(li.id,li.name)\\\"><i-->\\r\\n                        <!--class=\\\"font-icon font-icon-pencil\\\"></i>Edit</a>-->\\r\\n                        <!--<a class=\\\"dropdown-item\\\" (click)=\\\"email_list_twitter(li.id,li.name)\\\"><i-->\\r\\n                        <!--class=\\\"font-icon font-icon-mail\\\"></i>Email</a>-->\\r\\n                        <!--&lt;!&ndash;<a class=\\\"dropdown-item\\\" href=\\\"#\\\"><i class=\\\"font-icon font-icon-archive\\\"></i>Archive</a>&ndash;&gt;-->\\r\\n                        <!--<a class=\\\"dropdown-item\\\" (click)=\\\"delete_list_twitter(li.id)\\\"><i-->\\r\\n                        <!--class=\\\"font-icon font-icon-trash\\\"></i>Delete</a>-->\\r\\n                        <!--</div>-->\\r\\n                        <!--</div>-->\\r\\n                        <!--<div class=\\\"task-card-title\\\">-->\\r\\n                        <!--<div class=\\\"button__holder\\\">-->\\r\\n                        <!--&lt;!&ndash;<h2>Hover me &rarr;</h2>&ndash;&gt;-->\\r\\n                        <!--<button class=\\\"plus\\\"-->\\r\\n                        <!--(click)=\\\"select_add_influencers_twitter(li.id,li.name)\\\"></button>-->\\r\\n                        <!--</div>-->\\r\\n                        <!--<br>-->\\r\\n                        <!--<a id=\\\"list_name\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_twitter(li.id,li.name)\\\">{{li.name}}</a>-->\\r\\n                        <!--<span class=\\\"task-card-title-label\\\"></span>-->\\r\\n                        <!--</div>-->\\r\\n\\r\\n                        <!--</div>-->\\r\\n                        <!--<div class=\\\"task-card-footer\\\">-->\\r\\n                        <!--&lt;!&ndash;<div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>&ndash;&gt;-->\\r\\n                        <!--<div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_twitter(li.id, li.name)\\\"><i class=\\\"font-icon font-icon-users-group\\\"></i><strong>{{li.influencers_count}}-->\\r\\n                        <!--Influencers</strong></div>-->\\r\\n                        <!--<div class=\\\"avatar-preview avatar-preview-32\\\">-->\\r\\n                        <!--<a href=\\\"#\\\">-->\\r\\n                        <!--&lt;!&ndash;<img src=\\\"img/photo-64-2.jpg\\\" alt=\\\"\\\">&ndash;&gt;-->\\r\\n                        <!--</a>-->\\r\\n                        <!--</div>-->\\r\\n                        <!--</div>-->\\r\\n                        <!--</section>&lt;!&ndash;.task-card&ndash;&gt;-->\\r\\n\\r\\n\\r\\n                        <!--</div>-->\\r\\n                        <!--</div>-->\\r\\n\\r\\n                        <!--.tasks-grid-col-->\\r\\n\\r\\n\\r\\n\\r\\n                    </div><!--.tasks-grid-->\\r\\n\\r\\n                </div>\\r\\n\\r\\n            </mat-tab>\\r\\n\\r\\n            <mat-tab label=\\\"Blogosphere\\\">\\r\\n                <ng-template mat-tab-label>\\r\\n                     <span class=\\\"nav-link-in-dash\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fab fa-newspaper-o\\\"></i>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tBlogosphere\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\r\\n                </ng-template>\\r\\n                <br>\\r\\n\\r\\n                <div>\\r\\n                    <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"margin: 0 auto; width: 90%\\\">\\r\\n                        <div class=\\\"row header\\\">\\r\\n                            <div class=\\\"col-sm-12\\\">\\r\\n                                <div class=\\\"row\\\">\\r\\n                                    <div class=\\\"col-md-6\\\">\\r\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\r\\n                                        </span>\\r\\n                                    </div>\\r\\n                                    <div class=\\\"col-md-6\\\">\\r\\n                                        <div class=\\\"row\\\">\\r\\n                                            <div class=\\\"col-md-8 col-sm-6 pull-right\\\">\\r\\n                                                <mat-select (change)=\\\"sort_lists_dd()\\\" name=\\\"selected_choice\\\" [(ngModel)]=\\\"selected_choice\\\"\\r\\n                                                           placeholder=\\\"Sort By\\\" style=\\\"width: 60%; float: right\\\">\\r\\n                                                    <mat-option *ngFor=\\\"let choice of blog_choices\\\" [value]=\\\"choice.code\\\">{{ choice.name }}\\r\\n                                                    </mat-option>\\r\\n                                                </mat-select>\\r\\n                                            </div>\\r\\n                                            <div class=\\\"col-md-4 col-sm-6 pull-right\\\">\\r\\n                                                <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"create_empty_list_dd()\\\">\\r\\n                                                    Create List\\r\\n                                                </button>\\r\\n                                            </div>\\r\\n\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n\\r\\n                        <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\r\\n                            <!--<div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>-->\\r\\n\\r\\n                            <div class=\\\"sortable\\\">\\r\\n                                <section class=\\\"box-typical task-card task\\\">\\r\\n                                    <div class=\\\"task-card-photo\\\">\\r\\n                                        <!--<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">-->\\r\\n                                    </div>\\r\\n                                    <div class=\\\"task-card-in\\\">\\r\\n                                        <!--<input type=\\\"checkbox\\\" style=\\\"zoom: 1.5\\\">-->\\r\\n                                        <!--<div class=\\\"btn-group task-card-menu\\\">-->\\r\\n                                        <!--<button type=\\\"button\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\"-->\\r\\n                                        <!--aria-expanded=\\\"false\\\">-->\\r\\n                                        <!--<i class=\\\"font-icon-dots-vert-square\\\"></i>-->\\r\\n                                        <!--</button>-->\\r\\n                                        <!--<div class=\\\"dropdown-menu dropdown-menu-right\\\">-->\\r\\n                                        <!--<a class=\\\"dropdown-item\\\" (click)=\\\"go_to_list(li.id,li.name)\\\"><i-->\\r\\n                                        <!--class=\\\"font-icon font-icon-pencil\\\"></i>Edit</a>-->\\r\\n                                        <!--<a class=\\\"dropdown-item\\\" (click)=\\\"email_list(li.id,li.name)\\\"><i-->\\r\\n                                        <!--class=\\\"font-icon font-icon-mail\\\"></i>Email</a>-->\\r\\n                                        <!--&lt;!&ndash;<a class=\\\"dropdown-item\\\" href=\\\"#\\\"><i class=\\\"font-icon font-icon-archive\\\"></i>Archive</a>&ndash;&gt;-->\\r\\n                                        <!--<a class=\\\"dropdown-item\\\" (click)=\\\"delete_list(li.id)\\\"><i-->\\r\\n                                        <!--class=\\\"font-icon font-icon-trash\\\"></i>Delete</a>-->\\r\\n                                        <!--</div>-->\\r\\n                                        <!--</div>-->\\r\\n                                        <div class=\\\"task-card-title-label text-center\\\">\\r\\n                                            <h5 style=\\\"font-weight: bolder\\\">{{li.name}}</h5>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"task-card-title text-center\\\">\\r\\n                                            <!--<div class=\\\"button__holder\\\">-->\\r\\n                                            <!--<button class=\\\"plus\\\"-->\\r\\n                                            <!--(click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>-->\\r\\n                                            <!--</div>-->\\r\\n                                            <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\r\\n                                            <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"select_add_influencers_dd(li.id, li.name) \\\">\\r\\n                                                Add Influencers\\r\\n                                            </button>\\r\\n                                        </div>\\r\\n\\r\\n                                    </div>\\r\\n                                    <div class=\\\"task-card-footer\\\">\\r\\n                                        <!--<div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>-->\\r\\n                                        <!-- <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_dd(li.id, li.name)\\\">\\r\\n                                            <i class=\\\"fa fa-edit\\\"></i>\\r\\n                                        </div> -->\\r\\n                                        <!--<div class=\\\"task-card-meta-item\\\" title=\\\"Click to Email\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list_dd(li.id, li.name)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-envelope\\\"></i>-->\\r\\n                                        <!--</div>-->\\r\\n                                        <!--<div class=\\\"task-card-meta-item text-right\\\" title=\\\"Click to Delete\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">-->\\r\\n                                        <!---->\\r\\n                                        <!--</div>-->\\r\\n                                        <div class=\\\"avatar-preview avatar-preview-32\\\">\\r\\n                                            <i class=\\\"fa fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_list_dd(li.id, li.name)\\\"></i>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </section>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                        <!--<div class=\\\"sh-n-table row\\\" >-->\\r\\n                            <!--<table>-->\\r\\n                                <!--<thead>-->\\r\\n                                <!--<tr>-->\\r\\n                                    <!--<th>List Name</th>-->\\r\\n                                    <!--<th>Total Influencers</th>-->\\r\\n                                    <!--<th>Add Influencers</th>-->\\r\\n                                    <!--<th>Edit</th>-->\\r\\n                                    <!--<th>Email</th>-->\\r\\n                                    <!--<th>Delete</th>-->\\r\\n                                <!--</tr>-->\\r\\n                                <!--</thead>-->\\r\\n                                <!--<tbody >-->\\r\\n                                <!--<tr *ngFor=\\\"let li of user_lists.results;let i=index\\\">-->\\r\\n                                    <!--<td>-->\\r\\n                                        <!--<a style=\\\"font-size: 17px;\\\" (click)=\\\"go_to_list_dd(li.id,li.name)\\\">-->\\r\\n                                            <!--{{li.name }}-->\\r\\n                                        <!--</a>-->\\r\\n                                    <!--</td>-->\\r\\n                                    <!--<td >-->\\r\\n                                        <!--<span class=\\\"block-ellipsis\\\"> {{li.influencers_count}}</span>-->\\r\\n                                    <!--</td>-->\\r\\n                                    <!--<td title=\\\"Click to add influencers in this list\\\">-->\\r\\n                                        <!--<a (click)=\\\"select_add_influencers_dd(li.id,li.name)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-plus\\\" ></i>-->\\r\\n\\r\\n                                        <!--</a>-->\\r\\n                                    <!--</td>-->\\r\\n                                    <!--<td  title=\\\"Click to Edit this list\\\">-->\\r\\n                                        <!--<a (click)=\\\"go_to_list_dd(li.id,li.name)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-pencil\\\" ></i>-->\\r\\n                                        <!--</a>-->\\r\\n                                    <!--</td>-->\\r\\n                                    <!--<td title=\\\"Click to Email this Infleuncer\\\">-->\\r\\n                                        <!--<a (click)=\\\"email_list_dd(li.id,li.name)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-envelope\\\" ></i>-->\\r\\n                                        <!--</a>-->\\r\\n                                    <!--</td>-->\\r\\n                                    <!--<td title=\\\"Click to Delete this influencer\\\">-->\\r\\n                                        <!--<a (click)=\\\"delete_list_dd(li.id)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-trash\\\" ></i>-->\\r\\n                                        <!--</a>-->\\r\\n                                    <!--</td>-->\\r\\n                                <!--</tr>-->\\r\\n                                <!--</tbody>-->\\r\\n                            <!--</table>-->\\r\\n                        <!--</div>-->\\r\\n\\r\\n                    <!--</div>&lt;!&ndash;.tasks-grid&ndash;&gt;</div>-->\\r\\n\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-tab>\\r\\n\\r\\n            <mat-tab label=\\\"Youtube\\\">\\r\\n                <ng-template mat-tab-label>\\r\\n                     <span class=\\\"nav-link-in-dash\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fab fa-youtube\\\"></i>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tYoutube\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\r\\n                </ng-template>\\r\\n                <br>\\r\\n\\r\\n                <div>\\r\\n                    <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"margin: 0 auto; width: 90%\\\">\\r\\n                        <div class=\\\"row header\\\">\\r\\n                            <div class=\\\"col-sm-12\\\">\\r\\n                                <div class=\\\"row\\\">\\r\\n                                    <div class=\\\"col-md-6\\\">\\r\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\r\\n                                        </span>\\r\\n                                    </div>\\r\\n                                    <div class=\\\"col-md-6\\\">\\r\\n                                        <div class=\\\"row\\\">\\r\\n\\r\\n                                            <div class=\\\"col-md-8 col-sm-6 pull-right\\\">\\r\\n                                                <mat-select (change)=\\\"sort_lists_yt()\\\" name=\\\"selected_choice\\\" [(ngModel)]=\\\"selected_choice\\\"\\r\\n                                                           placeholder=\\\"Sort By\\\" style=\\\"width: 60%; float: right\\\">\\r\\n                                                    <mat-option *ngFor=\\\"let choice of youtube_choices\\\" [value]=\\\"choice.code\\\">{{ choice.name }}\\r\\n                                                    </mat-option>\\r\\n                                                </mat-select>\\r\\n                                            </div>\\r\\n                                            <div class=\\\"col-md-4 col-sm-6 pull-right\\\">\\r\\n                                                <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"create_empty_list_yt()\\\">\\r\\n                                                    Create List\\r\\n                                                </button>\\r\\n                                            </div>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                        <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\r\\n                            <!--<div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>-->\\r\\n\\r\\n                            <div class=\\\"sortable\\\">\\r\\n                                <section class=\\\"box-typical task-card task\\\">\\r\\n                                    <div class=\\\"task-card-photo\\\">\\r\\n                                        <!--<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">-->\\r\\n                                    </div>\\r\\n                                    <div class=\\\"task-card-in\\\">\\r\\n\\r\\n                                        <div class=\\\"task-card-title-label text-center\\\">\\r\\n                                            <h5 style=\\\"font-weight: bolder\\\">{{li.name}}</h5>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"task-card-title text-center\\\">\\r\\n                                            <!--<div class=\\\"button__holder\\\">-->\\r\\n                                            <!--<button class=\\\"plus\\\"-->\\r\\n                                            <!--(click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>-->\\r\\n                                            <!--</div>-->\\r\\n                                            <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\r\\n                                            <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"select_add_influencers_yt(li.id, li.name) \\\">\\r\\n                                                Add Influencers\\r\\n                                            </button>\\r\\n                                        </div>\\r\\n\\r\\n                                    </div>\\r\\n                                    <div class=\\\"task-card-footer\\\">\\r\\n                                        <!--<div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>-->\\r\\n                                        <!-- <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_yt(li.id, li.name)\\\">\\r\\n                                            <i class=\\\"fab fa-edit\\\"></i>\\r\\n                                        </div> -->\\r\\n                                        <!--<div class=\\\"task-card-meta-item\\\" title=\\\"Click to Email\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list_yt(li.id, li.name)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-envelope\\\"></i>-->\\r\\n                                        <!--</div>-->\\r\\n                                        <!--<div class=\\\"task-card-meta-item text-right\\\" title=\\\"Click to Delete\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">-->\\r\\n                                        <!---->\\r\\n                                        <!--</div>-->\\r\\n                                        <div class=\\\"avatar-preview avatar-preview-32\\\">\\r\\n                                            <i class=\\\"fa fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_list_yt(li.id, li.name)\\\"></i>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </section>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                        <!--.tasks-grid-col-->\\r\\n                        <!--<div class=\\\"sh-n-table row\\\" >-->\\r\\n                            <!--<table>-->\\r\\n                                <!--<thead>-->\\r\\n                                <!--<tr>-->\\r\\n                                    <!--<th>List Name</th>-->\\r\\n                                    <!--<th>Total Influencers</th>-->\\r\\n                                    <!--<th>Add Influencers</th>-->\\r\\n                                    <!--<th>Edit</th>-->\\r\\n                                    <!--<th>Email</th>-->\\r\\n                                    <!--<th>Delete</th>-->\\r\\n                                <!--</tr>-->\\r\\n                                <!--</thead>-->\\r\\n                                <!--<tbody >-->\\r\\n                                <!--<tr *ngFor=\\\"let li of user_lists.results;let i=index\\\">-->\\r\\n                                    <!--<td>-->\\r\\n                                        <!--<a style=\\\"font-size: 17px;\\\" (click)=\\\"go_to_list_yt(li.id,li.name)\\\">-->\\r\\n                                            <!--{{li.name }}-->\\r\\n                                        <!--</a>-->\\r\\n                                    <!--</td>-->\\r\\n                                    <!--<td >-->\\r\\n                                        <!--<span class=\\\"block-ellipsis\\\"> {{li.influencers_count}}</span>-->\\r\\n                                    <!--</td>-->\\r\\n                                    <!--<td title=\\\"Click to add influencers in this list\\\">-->\\r\\n                                        <!--<a (click)=\\\"select_add_influencers_yt(li.id,li.name)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-plus\\\" ></i>-->\\r\\n\\r\\n                                        <!--</a>-->\\r\\n                                    <!--</td>-->\\r\\n                                    <!--<td  title=\\\"Click to Edit this list\\\">-->\\r\\n                                        <!--<a (click)=\\\"go_to_list_yt(li.id,li.name)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-pencil\\\" ></i>-->\\r\\n                                        <!--</a>-->\\r\\n                                    <!--</td>-->\\r\\n                                    <!--<td title=\\\"Click to Email this Infleuncer\\\">-->\\r\\n                                        <!--<a (click)=\\\"email_list_yt(li.id,li.name)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-envelope\\\" ></i>-->\\r\\n                                        <!--</a>-->\\r\\n                                    <!--</td>-->\\r\\n                                    <!--<td title=\\\"Click to Delete this influencer\\\">-->\\r\\n                                        <!--<a (click)=\\\"delete_list_yt(li.id)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-trash\\\" ></i>-->\\r\\n                                        <!--</a>-->\\r\\n                                    <!--</td>-->\\r\\n                                <!--</tr>-->\\r\\n                                <!--</tbody>-->\\r\\n                            <!--</table>-->\\r\\n                        <!--</div>-->\\r\\n                    </div><!--.tasks-grid--></div>\\r\\n\\r\\n\\r\\n            </mat-tab>\\r\\n            <mat-tab label=\\\"Instagram\\\">\\r\\n                <ng-template mat-tab-label>\\r\\n                     <span class=\\\"nav-link-in-dash\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fab fa-instagram\\\"></i>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tInstagram\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\r\\n                </ng-template>\\r\\n                <br>\\r\\n\\r\\n                <div>\\r\\n                    <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"margin:0 auto; width: 90%\\\">\\r\\n                        <div class=\\\"row header\\\">\\r\\n                            <div class=\\\"col-sm-12\\\">\\r\\n                                <div class=\\\"row\\\">\\r\\n                                    <div class=\\\"col-md-6\\\">\\r\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\r\\n                                        </span>\\r\\n                                    </div>\\r\\n                                    <div class=\\\"col-md-6\\\">\\r\\n                                        <div class=\\\"row\\\">\\r\\n                                            <div class=\\\"col-md-8 col-sm-6 pull-right\\\">\\r\\n                                                <mat-select (change)=\\\"sort_lists_in()\\\" name=\\\"selected_choice\\\" [(ngModel)]=\\\"selected_choice\\\"\\r\\n                                                           placeholder=\\\"Sort By\\\" style=\\\"width: 60%; float: right\\\">\\r\\n                                                    <mat-option *ngFor=\\\"let choice of insta_choices\\\" [value]=\\\"choice.code\\\">{{ choice.name }}\\r\\n                                                    </mat-option>\\r\\n                                                </mat-select>\\r\\n                                            </div>\\r\\n\\r\\n                                            <div class=\\\"col-md-4 col-sm-6 pull-right\\\">\\r\\n                                                <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"create_empty_list_in()\\\">\\r\\n                                                    Create List\\r\\n                                                </button>\\r\\n                                            </div>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\r\\n                            <!--<div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>-->\\r\\n\\r\\n                            <div class=\\\"sortable\\\">\\r\\n                                <section class=\\\"box-typical task-card task\\\">\\r\\n                                    <div class=\\\"task-card-photo\\\">\\r\\n                                        <!--<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">-->\\r\\n                                    </div>\\r\\n                                    <div class=\\\"task-card-in\\\">\\r\\n\\r\\n                                        <div class=\\\"task-card-title-label text-center\\\">\\r\\n                                            <h5 style=\\\"font-weight: bolder\\\">{{li.name}}</h5>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"task-card-title text-center\\\">\\r\\n                                            <!--<div class=\\\"button__holder\\\">-->\\r\\n                                            <!--<button class=\\\"plus\\\"-->\\r\\n                                            <!--(click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>-->\\r\\n                                            <!--</div>-->\\r\\n                                            <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\r\\n                                            <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-priamry\\\" (click)=\\\"select_add_influencers_in(li.id, li.name) \\\">\\r\\n                                                Add Influencers\\r\\n                                            </button>\\r\\n                                        </div>\\r\\n\\r\\n                                    </div>\\r\\n                                    <div class=\\\"task-card-footer\\\">\\r\\n                                        <!--<div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>-->\\r\\n                                        <!-- <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_in(li.id, li.name)\\\">\\r\\n                                            <i class=\\\"fab fa-edit\\\"></i>\\r\\n                                        </div> -->\\r\\n                                        <!--<div class=\\\"task-card-meta-item\\\" title=\\\"Click to Email\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list_in(li.id, li.name)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-envelope\\\"></i>-->\\r\\n                                        <!--</div>-->\\r\\n                                        <!--<div class=\\\"task-card-meta-item text-right\\\" title=\\\"Click to Delete\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">-->\\r\\n                                        <!---->\\r\\n                                        <!--</div>-->\\r\\n                                        <div class=\\\"avatar-preview avatar-preview-32\\\">\\r\\n                                            <i class=\\\"fa fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_list_in(li.id, li.name)\\\"></i>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </section>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n\\r\\n                    </div><!--.tasks-grid-->\\r\\n                </div>\\r\\n\\r\\n\\r\\n            </mat-tab>\\r\\n            <!--<p>For Facebook</p> -->\\r\\n\\r\\n\\r\\n            <mat-tab label=\\\"Facebook\\\">\\r\\n                <ng-template mat-tab-label>\\r\\n                     <span class=\\\"nav-link-in-dash\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fab fa-facebook\\\"></i>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFacebook\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\r\\n                </ng-template>\\r\\n                <br>\\r\\n\\r\\n                <div>\\r\\n                    <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"width: 90%; margin: 0 auto\\\">\\r\\n                        <div class=\\\"row header\\\">\\r\\n                            <div class=\\\"col-sm-12\\\">\\r\\n                                <div class=\\\"row\\\">\\r\\n                                    <div class=\\\"col-md-6\\\">\\r\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\r\\n                                        </span>\\r\\n                                    </div>\\r\\n                                    <div class=\\\"col-md-6\\\">\\r\\n                                        <div class=\\\"row\\\">\\r\\n                                            <div class=\\\"col-md-8 col-sm-6 pull-right\\\">\\r\\n                                                <mat-select (change)=\\\"sort_lists_fb()\\\" name=\\\"selected_choice\\\" [(ngModel)]=\\\"selected_choice\\\"\\r\\n                                                           placeholder=\\\"Sort By\\\" style=\\\"width: 60%; float: right\\\">\\r\\n                                                    <mat-option *ngFor=\\\"let choice of facebook_choices\\\" [value]=\\\"choice.code\\\">{{ choice.name }}\\r\\n                                                    </mat-option>\\r\\n                                                </mat-select>\\r\\n                                            </div>\\r\\n                                            <div class=\\\"col-md-4 col-sm-6 pull-right\\\">\\r\\n                                                <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"create_empty_list_fb()\\\">\\r\\n                                                    Create List\\r\\n                                                </button>\\r\\n                                            </div>\\r\\n\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\r\\n                            <!--<div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>-->\\r\\n\\r\\n                            <div class=\\\"sortable\\\">\\r\\n                                <section class=\\\"box-typical task-card task\\\">\\r\\n                                    <div class=\\\"task-card-photo\\\">\\r\\n                                        <!--<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">-->\\r\\n                                    </div>\\r\\n                                    <div class=\\\"task-card-in\\\">\\r\\n\\r\\n                                        <div class=\\\"task-card-title-label text-center\\\">\\r\\n                                            <h5 style=\\\"font-weight: bolder\\\">{{li.name}}</h5>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"task-card-title text-center\\\">\\r\\n                                            <!--<div class=\\\"button__holder\\\">-->\\r\\n                                            <!--<button class=\\\"plus\\\"-->\\r\\n                                            <!--(click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>-->\\r\\n                                            <!--</div>-->\\r\\n                                            <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\r\\n                                            <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-priamry\\\" (click)=\\\"select_add_influencers_fb(li.id, li.name) \\\">\\r\\n                                                Add Influencers\\r\\n                                            </button>\\r\\n                                        </div>\\r\\n\\r\\n                                    </div>\\r\\n                                    <div class=\\\"task-card-footer\\\">\\r\\n                                        <!--<div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>-->\\r\\n                                        <!-- <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_fb(li.id, li.name)\\\">\\r\\n                                            <i class=\\\"fab fa-edit\\\"></i>\\r\\n                                        </div> -->\\r\\n                                        <!--<div class=\\\"task-card-meta-item\\\" title=\\\"Click to Email\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list_dd(li.id, li.name)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-envelope\\\"></i>-->\\r\\n                                        <!--</div>-->\\r\\n                                        <!--<div class=\\\"task-card-meta-item text-right\\\" title=\\\"Click to Delete\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">-->\\r\\n                                        <!---->\\r\\n                                        <!--</div>-->\\r\\n                                        <div class=\\\"avatar-preview avatar-preview-32\\\">\\r\\n                                            <i class=\\\"fa fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_list_fb(li.id, li.name)\\\"></i>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </section>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n\\r\\n            </mat-tab>\\r\\n\\r\\n\\r\\n            <!-- <mat-tab label=\\\"linkedIn\\\">\\r\\n                <ng-template mat-tab-label>\\r\\n                     <span class=\\\"nav-link-in-dash\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fab fa-linkedin\\\"></i>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tLinkedin\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\r\\n                </ng-template>\\r\\n                <br>\\r\\n\\r\\n                <div>\\r\\n                    <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"margin: 0 auto; width: 90%\\\">\\r\\n                        <div class=\\\"row header\\\">\\r\\n                            <div class=\\\"col-sm-12\\\">\\r\\n                                <div class=\\\"row\\\">\\r\\n                                    <div class=\\\"col-md-6\\\">\\r\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\r\\n                                        </span>\\r\\n                                    </div>\\r\\n                                    <div class=\\\"col-md-6\\\">\\r\\n                                        <div class=\\\"row\\\">\\r\\n                                            <div class=\\\"col-md-8 col-sm-6 pull-right\\\">\\r\\n                                                <mat-select (change)=\\\"sort_list_lnkd()\\\" name=\\\"selected_choice\\\" [(ngModel)]=\\\"selected_choice\\\"\\r\\n                                                           placeholder=\\\"Sort By\\\" style=\\\"width: 60%; float: right\\\">\\r\\n                                                    <mat-option *ngFor=\\\"let choice of linkedin_choices\\\" [value]=\\\"choice.code\\\">{{ choice.name }}\\r\\n                                                    </mat-option>\\r\\n                                                </mat-select>\\r\\n                                            </div>\\r\\n                                            <div class=\\\"col-md-4 col-sm-6 pull-right\\\">\\r\\n                                                <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"create_empty_list_lnkd()\\\">\\r\\n                                                    Create List\\r\\n                                                </button>\\r\\n                                            </div>\\r\\n\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\r\\n                            \\r\\n                            <div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>\\r\\n\\r\\n                            <div class=\\\"sortable\\\">\\r\\n                                <section class=\\\"box-typical task-card task\\\">\\r\\n                                    <div class=\\\"task-card-photo\\\">\\r\\n                                        <img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">\\r\\n                                    </div>\\r\\n                                    <div class=\\\"task-card-in\\\">\\r\\n\\r\\n                                        <div class=\\\"task-card-title-label text-center\\\">\\r\\n                                            <h6 style=\\\"font-weight: bolder\\\">{{li.name}}</h6>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"task-card-title text-center\\\">\\r\\n\\r\\n                                            <div class=\\\"button__holder\\\">\\r\\n                                            <button class=\\\"plus\\\"\\r\\n                                            (click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>\\r\\n                                            </div>\\r\\n\\r\\n                                            <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\r\\n                                            <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"select_add_influencers_lnkd(li.id, li.name) \\\">\\r\\n                                                Add Influencers\\r\\n                                            </button>\\r\\n                                        </div>\\r\\n\\r\\n                                    </div>\\r\\n                                    <div class=\\\"task-card-footer\\\">\\r\\n                                        \\r\\n                                        <div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>\\r\\n                                        \\r\\n                                        <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_lnkd(li.id, li.name)\\\">\\r\\n                                            <i class=\\\"fab fa-edit\\\"></i>\\r\\n                                        </div>\\r\\n                                        \\r\\n                                        <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Email\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list_dd(li.id, li.name)\\\">\\r\\n                                            <i class=\\\"fab fa-envelope\\\"></i>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"task-card-meta-item text-right\\\" title=\\\"Click to Delete\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">\\r\\n                                        \\r\\n                                        </div>\\r\\n                                        \\r\\n                                        \\r\\n                                        <div class=\\\"avatar-preview avatar-preview-32\\\">\\r\\n                                            <i class=\\\"fab fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_ilist_lnkd(li.id, li.name)\\\"></i>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </section>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    .tasks-grid\\r\\n                </div>\\r\\n\\r\\n\\r\\n            </mat-tab> -->\\r\\n\\r\\n\\r\\n            <!--  For Pinterest Coded by Amjad-->\\r\\n            <mat-tab label=\\\"Pinterest\\\">\\r\\n                <ng-template mat-tab-label>\\r\\n                     <span class=\\\"nav-link-in-dash\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fab fa-pinterest \\\"></i>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tPinterest\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\r\\n                </ng-template>\\r\\n                <br>\\r\\n\\r\\n                <div>\\r\\n                    <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"width: 90%; margin: 0 auto\\\">\\r\\n                        <div class=\\\"row header\\\">\\r\\n                            <div class=\\\"col-sm-12\\\">\\r\\n                                <div class=\\\"row\\\">\\r\\n                                    <div class=\\\"col-md-6\\\">\\r\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\r\\n                                        </span>\\r\\n                                    </div>\\r\\n                                    <div class=\\\"col-md-6\\\">\\r\\n                                        <div class=\\\"row\\\">\\r\\n                                            <div class=\\\"col-md-8 col-sm-6 pull-right\\\">\\r\\n                                                <mat-select (change)=\\\"sort_list_pt()\\\" name=\\\"selected_choice\\\" [(ngModel)]=\\\"selected_choice\\\"\\r\\n                                                           placeholder=\\\"Sort By\\\" style=\\\"width: 60%; float: right\\\">\\r\\n                                                    <mat-option *ngFor=\\\"let choice of pint_choices\\\" [value]=\\\"choice.code\\\">{{ choice.name }}\\r\\n                                                    </mat-option>\\r\\n                                                </mat-select>\\r\\n                                            </div>\\r\\n                                            <div class=\\\"col-md-4 col-sm-6 pull-right\\\">\\r\\n                                                <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"create_empty_list_pt()\\\">\\r\\n                                                    Create List\\r\\n                                                </button>\\r\\n                                            </div>\\r\\n                                        </div>\\r\\n\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                        <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\r\\n                            <!--<div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>-->\\r\\n\\r\\n                            <div class=\\\"sortable\\\">\\r\\n                                <section class=\\\"box-typical task-card task\\\">\\r\\n                                    <div class=\\\"task-card-photo\\\">\\r\\n                                        <!--<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">-->\\r\\n                                    </div>\\r\\n                                    <div class=\\\"task-card-in\\\">\\r\\n\\r\\n                                        <div class=\\\"task-card-title-label text-center\\\">\\r\\n                                            <h5 style=\\\"font-weight: bolder\\\">{{li.name}}</h5>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"task-card-title text-center\\\">\\r\\n                                            <!--<div class=\\\"button__holder\\\">-->\\r\\n                                            <!--<button class=\\\"plus\\\"-->\\r\\n                                            <!--(click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>-->\\r\\n                                            <!--</div>-->\\r\\n                                            <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\r\\n                                            <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-priamry\\\" (click)=\\\"select_add_influencers_pt(li.id, li.name) \\\">\\r\\n                                                Add Influencers\\r\\n                                            </button>\\r\\n                                        </div>\\r\\n\\r\\n                                    </div>\\r\\n                                    <div class=\\\"task-card-footer\\\">\\r\\n                                        <!--<div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>-->\\r\\n                                        <!-- <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_pt(li.id, li.name)\\\">\\r\\n                                            <i class=\\\"fab fa-edit\\\"></i>\\r\\n                                        </div> -->\\r\\n                                        <!--<div class=\\\"task-card-meta-item\\\" title=\\\"Click to Email\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list_dd(li.id, li.name)\\\">-->\\r\\n                                            <!--<i class=\\\"fab fa-envelope\\\"></i>-->\\r\\n                                        <!--</div>-->\\r\\n                                        <!--<div class=\\\"task-card-meta-item text-right\\\" title=\\\"Click to Delete\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">-->\\r\\n                                        <!---->\\r\\n                                        <!--</div>-->\\r\\n                                        <div class=\\\"avatar-preview avatar-preview-32\\\">\\r\\n                                            <i class=\\\"fa fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_ilist_pt(li.id, li.name)\\\"></i>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </section>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div><!--.tasks-grid-->\\r\\n                </div>\\r\\n\\r\\n\\r\\n            </mat-tab>\\r\\n            <mat-tab label=\\\"Periscope\\\">\\r\\n                <ng-template mat-tab-label>\\r\\n                     <span class=\\\"nav-link-in-dash\\\">\\r\\n                         <img src=\\\"../../assets/img/periscope.png\\\">\\r\\n                         Periscope\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\r\\n                </ng-template>\\r\\n\\r\\n\\r\\n                <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"width: 90%; margin: 28px auto 20px auto \\\">\\r\\n                    <div class=\\\"row header\\\">\\r\\n                        <div class=\\\"col-sm-12\\\">\\r\\n                            <div class=\\\"row\\\">\\r\\n                                <div class=\\\"col-md-6\\\">\\r\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\r\\n                                        </span>\\r\\n                                </div>\\r\\n                                <div class=\\\"col-md-6\\\">\\r\\n                                    <div class=\\\"row\\\">\\r\\n                                        <div class=\\\"col-md-8 col-sm-6 pull-right\\\">\\r\\n                                            <mat-select (change)=\\\"sort_lists_peri()\\\" name=\\\"selected_choice\\\" [(ngModel)]=\\\"selected_choice\\\"\\r\\n                                                       placeholder=\\\"Sort By\\\" style=\\\"width: 60%; float: right\\\">\\r\\n                                                <mat-option *ngFor=\\\"let choice of periscope_choices\\\" [value]=\\\"choice.code\\\">{{ choice.name }}\\r\\n                                                </mat-option>\\r\\n                                            </mat-select>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"col-md-4 col-sm-6 pull-right\\\">\\r\\n                                            <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"create_empty_list_peri()\\\">\\r\\n                                                Create List\\r\\n                                            </button>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\r\\n                        <!--<div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>-->\\r\\n\\r\\n                        <div class=\\\"sortable\\\">\\r\\n                            <section class=\\\"box-typical task-card task\\\">\\r\\n                                <div class=\\\"task-card-photo\\\">\\r\\n                                    <!--<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">-->\\r\\n                                </div>\\r\\n                                <div class=\\\"task-card-in\\\">\\r\\n\\r\\n                                    <div class=\\\"task-card-title-label text-center\\\">\\r\\n                                        <h5 style=\\\"font-weight: bolder\\\">{{li.name}}</h5>\\r\\n                                    </div>\\r\\n                                    <div class=\\\"task-card-title text-center\\\">\\r\\n                                        <!--<div class=\\\"button__holder\\\">-->\\r\\n                                        <!--<button class=\\\"plus\\\"-->\\r\\n                                        <!--(click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>-->\\r\\n                                        <!--</div>-->\\r\\n                                        <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\r\\n                                        <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-priamry\\\" (click)=\\\"select_add_influencers_peri(li.id, li.name) \\\">\\r\\n                                            Add Influencers\\r\\n                                        </button>\\r\\n                                    </div>\\r\\n\\r\\n                                </div>\\r\\n                                <div class=\\\"task-card-footer\\\">\\r\\n                                    <!--<div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>-->\\r\\n                                    <!-- <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_peri(li.id, li.name)\\\">\\r\\n                                        <i class=\\\"fab fa-edit\\\"></i>\\r\\n                                    </div> -->\\r\\n                                    <!--<div class=\\\"task-card-meta-item\\\" title=\\\"Click to Email\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list_dd(li.id, li.name)\\\">-->\\r\\n                                        <!--<i class=\\\"fab fa-envelope\\\"></i>-->\\r\\n                                    <!--</div>-->\\r\\n                                    <!--<div class=\\\"task-card-meta-item text-right\\\" title=\\\"Click to Delete\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">-->\\r\\n                                    <!---->\\r\\n                                    <!--</div>-->\\r\\n                                    <div class=\\\"avatar-preview avatar-preview-32\\\">\\r\\n                                        <i class=\\\"fa fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_ilist_peri(li.id, li.name)\\\"></i>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </section>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                </div>\\r\\n            </mat-tab>\\r\\n\\r\\n            <mat-tab label=\\\"Periscope\\\">\\r\\n                <ng-template mat-tab-label>\\r\\n                     <span class=\\\"nav-link-in-dash\\\">\\r\\n                         <!--<img src=\\\"../../assets/img/periscope.png\\\">-->\\r\\n                         <i class=\\\"fab fa-medium\\\"></i>\\r\\n                         Medium\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\r\\n                </ng-template>\\r\\n\\r\\n\\r\\n                <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"width: 90%; margin: 28px auto 20px auto \\\">\\r\\n                    <div class=\\\"row header\\\">\\r\\n                        <div class=\\\"col-sm-12\\\">\\r\\n                            <div class=\\\"row\\\">\\r\\n                                <div class=\\\"col-md-6\\\">\\r\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\r\\n                                        </span>\\r\\n                                </div>\\r\\n                                <div class=\\\"col-md-6\\\">\\r\\n                                    <div class=\\\"row\\\">\\r\\n                                        <div class=\\\"col-md-8 col-sm-6 pull-right\\\">\\r\\n                                            <mat-select (change)=\\\"sort_lists_med()\\\" name=\\\"selected_choice\\\" [(ngModel)]=\\\"selected_choice\\\"\\r\\n                                                        placeholder=\\\"Sort By\\\" style=\\\"width: 60%; float: right\\\">\\r\\n                                                <mat-option *ngFor=\\\"let choice of medium_choices\\\" [value]=\\\"choice.code\\\">{{ choice.name }}\\r\\n                                                </mat-option>\\r\\n                                            </mat-select>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"col-md-4 col-sm-6 pull-right\\\">\\r\\n                                            <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"create_empty_list_med()\\\">\\r\\n                                                Create List\\r\\n                                            </button>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\r\\n                        <!--<div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>-->\\r\\n\\r\\n                        <div class=\\\"sortable\\\">\\r\\n                            <section class=\\\"box-typical task-card task\\\">\\r\\n                                <div class=\\\"task-card-photo\\\">\\r\\n                                    <!--<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">-->\\r\\n                                </div>\\r\\n                                <div class=\\\"task-card-in\\\">\\r\\n\\r\\n                                    <div class=\\\"task-card-title-label text-center\\\">\\r\\n                                        <h5 style=\\\"font-weight: bolder\\\">{{li.name}}</h5>\\r\\n                                    </div>\\r\\n                                    <div class=\\\"task-card-title text-center\\\">\\r\\n                                        <!--<div class=\\\"button__holder\\\">-->\\r\\n                                        <!--<button class=\\\"plus\\\"-->\\r\\n                                        <!--(click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>-->\\r\\n                                        <!--</div>-->\\r\\n                                        <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\r\\n                                        <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"select_add_influencers_med(li.id, li.name) \\\">\\r\\n                                            Add Influencers\\r\\n                                        </button>\\r\\n                                    </div>\\r\\n\\r\\n                                </div>\\r\\n                                <div class=\\\"task-card-footer\\\">\\r\\n                                    <!--<div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>-->\\r\\n                                    <!-- <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_med(li.id, li.name)\\\">\\r\\n                                        <i class=\\\"fab fa-edit\\\"></i>\\r\\n                                    </div> -->\\r\\n                                    <!--<div class=\\\"task-card-meta-item\\\" title=\\\"Click to Email\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list_dd(li.id, li.name)\\\">-->\\r\\n                                        <!--<i class=\\\"fab fa-envelope\\\"></i>-->\\r\\n                                    <!--</div>-->\\r\\n                                    <!--<div class=\\\"task-card-meta-item text-right\\\" title=\\\"Click to Delete\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">-->\\r\\n                                    <!---->\\r\\n                                    <!--</div>-->\\r\\n                                    <div class=\\\"avatar-preview avatar-preview-32\\\">\\r\\n                                        <i class=\\\"fa fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_ilist_med(li.id, li.name)\\\"></i>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </section>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                </div>\\r\\n            </mat-tab>\\r\\n            <mat-tab label=\\\"Flickr\\\">\\r\\n                <ng-template mat-tab-label>\\r\\n                     <span class=\\\"nav-link-in-dash\\\">\\r\\n                         <!--<img src=\\\"../../assets/img/periscope.png\\\">-->\\r\\n                         <i class=\\\"fab fa-flickr\\\"></i>\\r\\n                         Flickr\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\r\\n                </ng-template>\\r\\n\\r\\n\\r\\n                <div class=\\\"tasks-grid\\\" *ngIf=\\\"loaded\\\" style=\\\"width: 90%; margin: 28px auto 20px auto \\\">\\r\\n                    <div class=\\\"row header\\\">\\r\\n                        <div class=\\\"col-sm-12\\\">\\r\\n                            <div class=\\\"row\\\">\\r\\n                                <div class=\\\"col-md-6\\\">\\r\\n                                        <span class=\\\"tasks-grid-col-title align-left\\\">Total Lists: <strong>{{user_lists.totalItems}}</strong>\\r\\n                                        </span>\\r\\n                                </div>\\r\\n                                <div class=\\\"col-md-6\\\">\\r\\n                                    <div class=\\\"row\\\">\\r\\n                                        <div class=\\\"col-md-8 col-sm-6 pull-right\\\">\\r\\n                                            <mat-select (change)=\\\"sort_lists_fli()\\\"  name=\\\"selected_choice\\\" [(ngModel)]=\\\"selected_choice\\\"\\r\\n                                                        placeholder=\\\"Sort By\\\" style=\\\"width: 60%; float: right\\\">\\r\\n                                                <mat-option *ngFor=\\\"let choice of choices_flicker\\\" [value]=\\\"choice.code\\\">{{ choice.name }}\\r\\n                                                </mat-option>\\r\\n                                            </mat-select>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"col-md-4 col-sm-6 pull-right\\\">\\r\\n                                            <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"create_empty_list_flkr()\\\">\\r\\n                                                Create List\\r\\n                                            </button>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n\\r\\n                    <div *ngFor=\\\"let li of user_lists.results; let i = index\\\" [ngClass]=\\\"{'tasks-grid-col': i%7===0, 'tasks-grid-col red': i%3===0, 'tasks-grid-col black': i%2===0, 'tasks-grid-col blue': i%1===0}\\\">\\r\\n                        <!--<div class=\\\"tasks-grid-col-title\\\">Done <strong>100</strong></div>-->\\r\\n\\r\\n                        <div class=\\\"sortable\\\">\\r\\n                            <section class=\\\"box-typical task-card task\\\">\\r\\n                                <div class=\\\"task-card-photo\\\">\\r\\n                                    <!--<img src=\\\"img/img-task.jpg\\\" alt=\\\"\\\">-->\\r\\n                                </div>\\r\\n                                <div class=\\\"task-card-in\\\">\\r\\n\\r\\n                                    <div class=\\\"task-card-title-label text-center\\\">\\r\\n                                        <h5 style=\\\"font-weight: bolder\\\">{{li.name}}</h5>\\r\\n                                    </div>\\r\\n                                    <div class=\\\"task-card-title text-center\\\">\\r\\n                                        <!--<div class=\\\"button__holder\\\">-->\\r\\n                                        <!--<button class=\\\"plus\\\"-->\\r\\n                                        <!--(click)=\\\"select_add_influencers(li.id,li.name)\\\"></button>-->\\r\\n                                        <!--</div>-->\\r\\n                                        <h6>  Total Influencers: <b>{{li.influencers_count}}</b></h6>\\r\\n                                        <button style=\\\"margin-bottom: 5%\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"select_add_influencers_flkr(li.id, li.name) \\\">\\r\\n                                            Add Influencers\\r\\n                                        </button>\\r\\n                                    </div>\\r\\n\\r\\n                                </div>\\r\\n                                <div class=\\\"task-card-footer\\\">\\r\\n                                    <!--<div class=\\\"task-card-meta-item\\\"><i class=\\\"font-icon font-icon-comments-2\\\"></i>10</div>-->\\r\\n                                    <!-- <div class=\\\"task-card-meta-item\\\" title=\\\"Click to Show all Influencers in this list\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"go_to_list_flkr(li.id, li.name)\\\">\\r\\n                                        <i class=\\\"fab fa-edit\\\"></i>\\r\\n                                    </div> -->\\r\\n                                    <!--<div class=\\\"task-card-meta-item\\\" title=\\\"Click to Email\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list_dd(li.id, li.name)\\\">-->\\r\\n                                        <!--<i class=\\\"fab fa-envelope\\\"></i>-->\\r\\n                                    <!--</div>-->\\r\\n                                    <!--<div class=\\\"task-card-meta-item text-right\\\" title=\\\"Click to Delete\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"email_list(li.id, li.name)\\\">-->\\r\\n                                    <!---->\\r\\n                                    <!--</div>-->\\r\\n                                    <div class=\\\"avatar-preview avatar-preview-32\\\">\\r\\n                                        <i class=\\\"fa fa-trash\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"delete_ilist_flkr(li.id, li.name)\\\"></i>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </section>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                </div>\\r\\n            </mat-tab>\\r\\n\\r\\n        </mat-tab-group>\\r\\n        <preloader-small></preloader-small>\\r\\n        <!--<md-card>-->\\r\\n            <!--(Currently)Listing feature available for only blog influencers.-->\\r\\n        <!--</md-card>-->\\r\\n\\r\\n\\r\\n    </div>\\r\\n\\r\\n\\r\\n</div>\\r\\n<!--</div>-->\\r\\n<!-- <app-footer></app-footer> -->\\r\\n\\r\\n\"","module.exports = \"@import url(https://fonts.googleapis.com/css?family=Source+Sans+Pro:300);\\nbody, html {\\n  margin: 0;\\n  width: 100vw;\\n  height: 100vh;\\n  font-family: \\\"Source Sans Pro\\\" sans-serif; }\\n.button__holder {\\n  position: relative;\\n  width: 100%;\\n  height: 100%;\\n  display: flex;\\n  flex-wrap: wrap;\\n  align-items: center;\\n  justify-content: center; }\\n.button__holder:after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: 0;\\n    top: 0;\\n    right: 0;\\n    bottom: 0;\\n    left: 0; }\\n.button__holder h2 {\\n    margin-right: 1em;\\n    text-align: center;\\n    color: #79CDCD; }\\n.plus {\\n  position: relative;\\n  z-index: 1;\\n  width: 80px;\\n  height: 80px;\\n  background: #262626;\\n  border-radius: 50%;\\n  border: none;\\n  transition: box-shadow 400ms cubic-bezier(0.2, 0, 0.7, 1), -webkit-transform 200ms cubic-bezier(0.2, 0, 0.7, 1);\\n  transition: box-shadow 400ms cubic-bezier(0.2, 0, 0.7, 1), transform 200ms cubic-bezier(0.2, 0, 0.7, 1);\\n  transition: box-shadow 400ms cubic-bezier(0.2, 0, 0.7, 1), transform 200ms cubic-bezier(0.2, 0, 0.7, 1), -webkit-transform 200ms cubic-bezier(0.2, 0, 0.7, 1); }\\n.plus:after {\\n    content: \\\"+\\\";\\n    font-size: 5em;\\n    line-height: 1.1em;\\n    color: white; }\\n.plus:hover {\\n    box-shadow: 0 0 1px 10px rgba(13, 13, 13, 0.16), 0 0 1px 20px rgba(56, 50, 50, 0.1), 0 0 1px 30px rgba(0, 0, 0, 0.1); }\\n#list_name {\\n  font-size: 16px;\\n  font-weight: 700;\\n  color: #c00;\\n  text-transform: capitalize; }\\n.mat-tab-labels {\\n  background-color: #FFFFFF; }\\n.sh-n-table table thead tr th {\\n  background: #000;\\n  color: #fff;\\n  text-align: center;\\n  border-right: 1px solid;\\n  font-size: 16px;\\n  padding: 5px 0;\\n  box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.5), 0 6px 20px 0 rgba(0, 0, 0, 0.19) !important; }\\n.sh-n-table table tbody tr td {\\n  width: 300px;\\n  padding: 5px 10px;\\n  cursor: pointer;\\n  vertical-align: middle;\\n  text-align: center;\\n  font-size: .9em;\\n  font-weight: 400;\\n  color: #000;\\n  border: none !important;\\n  border-bottom: 1px solid #ccc !important; }\\n.sh-n-table table tbody tr td a {\\n  cursor: pointer; }\\n.crete-list-button {\\n  background: #000;\\n  margin: 17px !important; }\\n.crete-list-button:hover {\\n  color: #fff; }\\n.tasks-grid .header .tasks-grid-col-title {\\n  display: block;\\n  padding: 27px 0 0; }\\n.task-card-title-label h5 {\\n  padding-top: 13px;\\n  color: #6991c5;\\n  text-transform: capitalize;\\n  font-weight: 600; }\\n.task-card-footer {\\n  display: flex;\\n  justify-content: center; }\\n.task-card-meta-item {\\n  cursor: pointer;\\n  padding: 5px;\\n  color: #6991c5; }\\n.avatar-preview-32 {\\n  color: #d66464;\\n  padding: 5px;\\n  cursor: pointer; }\\n.avatar-preview-32:hover {\\n  color: #c00; }\\n.sh-n-table table tbody tr td:first-child {\\n  color: #c00;\\n  cursor: pointer; }\\ni {\\n  font-size: 18px; }\\n.btn-rounded {\\n  background: #000;\\n  color: #fff;\\n  text-align: center;\\n  margin-top: 3%;\\n  font-size: 17px;\\n  box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.5), 0 6px 20px 0 rgba(0, 0, 0, 0.19) !important; }\\n.list-name {\\n  color: black;\\n  font-size: 18px; }\\nlabel {\\n  color: black;\\n  font-size: 17px;\\n  font-weight: 600; }\\na {\\n  cursor: pointer; }\\nmat-tab-header {\\n  background: #FFFFFF !important; }\\n.nav-link-in-dash {\\n  font-size: 18px;\\n  font-weight: bold;\\n  color: #000; }\\n\"","import {Component, OnInit} from '@angular/core';\r\nimport {HttpService} from '../services/http-service';\r\nimport Swal from 'sweetalert2';\r\nimport {Headers, Response, Http} from '@angular/http';\r\nimport {User} from '../_models/index';\r\nimport {Config} from '../../config';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-userdashboard-template',\r\n    templateUrl: './userdashboard-template.component.html',\r\n    styleUrls: ['./userdashboard-template.component.scss']\r\n})\r\nexport class UserdashboardTemplateComponent implements OnInit {\r\n    currentUser: User;\r\n    user_lists;\r\n    user_lists_web;\r\n    selectedIndex;\r\n    current_dashboard: number = 1;\r\n    loaded: boolean = false;\r\n    selected_choice = '-id';\r\n    pint_choices = [\r\n        {code: 'name', name: 'Name - Ascending'},\r\n        {code: '-name', name: 'Name - Descending'},\r\n        {code: '-created_at', name: 'Newest'},\r\n        {code: 'created_at', name: 'Oldest'},\r\n        {code: '-pinterest_influencer', name: 'Number of influencers - DSC'},\r\n        {code: 'pinterest_influencer', name: 'Number of influencers - ASC'},\r\n        // {code: 'AL', name: 'Alabama'},\r\n    ];\r\n    youtube_choices = [\r\n        {code: 'name', name: 'Name - Ascending'},\r\n        {code: '-name', name: 'Name - Descending'},\r\n        {code: '-created_at', name: 'Newest'},\r\n        {code: 'created_at', name: 'Oldest'},\r\n        {code: '-youtube_influencer', name: 'Number of influencers - DSC'},\r\n        {code: 'youtube_influencer', name: 'Number of influencers - ASC'},\r\n        // {code: 'AL', name: 'Alabama'},\r\n    ];\r\n    periscope_choices=[\r\n        {code: 'name', name: 'Name - Ascending'},\r\n        {code: '-name', name: 'Name - Descending'},\r\n        {code: '-created_at', name: 'Newest'},\r\n        {code: 'created_at', name: 'Oldest'},\r\n        {code: '-periscope_influencer', name: 'Number of influencers - DSC'},\r\n        {code: 'periscope_influencer', name: 'Number of influencers - ASC'},\r\n    ];\r\n\r\n    medium_choices=[\r\n        {code: 'name', name: 'Name - Ascending'},\r\n        {code: '-name', name: 'Name - Descending'},\r\n        {code: '-created_at', name: 'Newest'},\r\n        {code: 'created_at', name: 'Oldest'},\r\n        {code: '-medium_influencer', name: 'Number of influencers - DSC'},\r\n        {code: 'medium_influencer', name: 'Number of influencers - ASC'},\r\n    ];\r\n    insta_choices = [\r\n        {code: 'name', name: 'Name - Ascending'},\r\n        {code: '-name', name: 'Name - Descending'},\r\n        {code: '-created_at', name: 'Newest'},\r\n        {code: 'created_at', name: 'Oldest'},\r\n        {code: '-instagram_influencer', name: 'Number of influencers - DSC'},\r\n        {code: 'instagram_influencer', name: 'Number of influencers - ASC'},\r\n        // {code: 'AL', name: 'Alabama'},\r\n    ];\r\n    facebook_choices = [\r\n        {code: 'name', name: 'Name - Ascending'},\r\n        {code: '-name', name: 'Name - Descending'},\r\n        {code: '-created_at', name: 'Newest'},\r\n        {code: 'created_at', name: 'Oldest'},\r\n        {code: '-facebook_influencer', name: 'Number of influencers - DSC'},\r\n        {code: 'facebook_influencer', name: 'Number of influencers - ASC'},\r\n        // {code: 'AL', name: 'Alabama'},\r\n    ];\r\n    linkedin_choices = [\r\n        {code: 'name', name: 'Name - Ascending'},\r\n        {code: '-name', name: 'Name - Descending'},\r\n        {code: '-created_at', name: 'Newest'},\r\n        {code: 'created_at', name: 'Oldest'},\r\n        {code: '-linkedin_influencer', name: 'Number of influencers - DSC'},\r\n        {code: 'linkedin_influencer', name: 'Number of influencers - ASC'},\r\n        // {code: 'AL', name: 'Alabama'},\r\n    ];\r\n    blog_choices = [\r\n        {code: 'name', name: 'Name - Ascending'},\r\n        {code: '-name', name: 'Name - Descending'},\r\n        {code: '-created_at', name: 'Newest'},\r\n        {code: 'created_at', name: 'Oldest'},\r\n        {code: '-blog_influencer', name: 'Number of influencers - DSC'},\r\n        {code: 'blog_influencer', name: 'Number of influencers - ASC'},\r\n        // {code: 'AL', name: 'Alabama'},\r\n    ];\r\n    choices_flicker = [\r\n        {code: 'name', name: 'Name - Ascending'},\r\n        {code: '-name', name: 'Name - Descending'},\r\n        {code: '-created_at', name: 'Newest'},\r\n        {code: 'created_at', name: 'Oldest'},\r\n        {code: '-flickr_influencer', name: 'Number of influencers - DSC'},\r\n        {code: 'flickr_influencer', name: 'Number of influencers - ASC'},\r\n        // {code: 'AL', name: 'Alabama'},\r\n    ];\r\n    selected_choice_twitter = '-id';\r\n    choices_twitter = [\r\n        {code: 'name', name: 'Name - Ascending'},\r\n        {code: '-name', name: 'Name - Descending'},\r\n        {code: '-created_at', name: 'Newest'},\r\n        {code: 'created_at', name: 'Oldest'},\r\n        {code: '-twitter_influencer', name: 'Number of influencers - DSC'},\r\n        {code: 'twitter_influencer', name: 'Number of influencers - ASC'},\r\n        // {code: 'AL', name: 'Alabama'},\r\n    ];\r\n    constructor(private http: HttpService, private router: Router) {}\r\n\r\n    ngOnInit() {\r\n        this.currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n\r\n        this.get_lists(this.selected_choice);\r\n    }\r\n\r\n    // Start Dashboard Web all API's Implements by Amjad\r\n\r\n            //Function that add influencers in web lists.\r\n    select_add_influencers(id: number, name: string, dashboard) {\r\n\r\n        localStorage.setItem('selected_list', JSON.stringify({id: id, name: name}));\r\n        // this.router.navigate(['multi/search'],{queryParams: {name: 'web'}})\r\n        this.router.navigate(['multi/search']);\r\n\r\n    }\r\n            // Function that fo to current web lists where you can edit the list.\r\n    go_to_list(e: number, name: string, dashboard) {\r\n        this.router.navigate(['blogs/list/', e])\r\n\r\n    }\r\n            //Send Email to Influencer's\r\n    email_list(e: number, name: string, dashboard) {\r\n        // localStorage.setItem('navigated_list',JSON.stringify({id:e,name:name}));\r\n        // if (dashboard === 1) {\r\n        //\r\n        // } else if (dashboard === 2) {\r\n        //     this.router.navigate(['email/settings/', e])\r\n        //\r\n        // } else if (dashboard === 6) {\r\n        this.router.navigate(['email/settings/', e])\r\n        //\r\n        // }\r\n    }\r\n        //Delete any Web list by clicking pencil Icons\r\n    delete_list(id: number) {\r\n\r\n        let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n        headers.append('Content-Type', 'application/json');\r\n        let myhttp = this.http;\r\n        Swal.fire({\r\n            // title: 'Are you sure?',\r\n            title: 'Deleted',\r\n            // text: 'You will not be able to recover this list!',\r\n            text: 'List has been deleted successfully',\r\n            // type: 'warning',\r\n            // showCancelButton: true,\r\n            // confirmButtonText: 'Yes, delete it!',\r\n            // cancelButtonText: 'No, keep it'\r\n        }).then(() => {\r\n\r\n            myhttp.delete(Config.api + '/delete_ilist/' + id,\r\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                data => {\r\n                    this.get_lists(this.selected_choice);\r\n\r\n                    // Swal.fire(\r\n                    //     'List Deleted!',\r\n                    //     '',\r\n                    //     'success'\r\n                    // )\r\n\r\n                },\r\n                error => {\r\n                    // alert('error')\r\n                    Swal.fire(\r\n                        'Try again after some time!',\r\n                        // error.toString(),\r\n                        'error'\r\n                    )\r\n                });\r\n        }, function (dismiss) {\r\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'Your list is not deleted :)',\r\n                    'error'\r\n                )\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    //Sort Lists of web\r\n    sort_lists() {\r\n        this.get_lists(this.selected_choice);\r\n    }\r\n       // Create New Lists of Web\r\n    create_empty_list() {\r\n\r\n        Swal.fire({\r\n            title: 'Enter the name of list',\r\n            text: 'New list will be created',\r\n            type: 'question',\r\n            input: 'text',\r\n            preConfirm: (result) => {\r\n                return new Promise((resolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (result === '') {\r\n                            reject('List name cannot be empty')\r\n                        } else if (result.length > 30) {\r\n                            reject('Length of list name cannot be greater than 30')\r\n                        }\r\n                        else {\r\n                            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n                            headers.append('Content-Type', 'application/json');\r\n\r\n                            this.http.post(Config.api + '/check_ilist/', JSON.stringify({\r\n                                    name: result,\r\n                                    username: this.currentUser.username\r\n                                }),\r\n                                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                                data => {\r\n                                    resolve()\r\n\r\n                                },\r\n                                error => {\r\n                                    reject('List named \"' + result + '\" already exists')\r\n\r\n                                });\r\n                        }\r\n                    }, )\r\n                }\r\n\r\n\r\n\r\n                )\r\n            },\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Create',\r\n            cancelButtonText: 'Cancel'\r\n        }).then((result) => {\r\n\r\n            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n            headers.append('Content-Type', 'application/json');\r\n\r\n            this.http.post(Config.api + '/create_add_ilist/', JSON.stringify({\r\n                    name: result.value,\r\n                    list: {},\r\n                    username: this.currentUser.username\r\n                }),\r\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                data => {\r\n                    this.get_lists(this.selected_choice);\r\n                    Swal.fire(\r\n                        'List created!',\r\n                        result.value(),\r\n                        'success'\r\n                    )\r\n                },\r\n                // error => {\r\n                //     Swal.fire(\r\n                //         'Try again after some time!',\r\n                //         error.toString(),\r\n                //         'error'\r\n                //     )\r\n                // }\r\n                );\r\n\r\n        }, function (dismiss) {\r\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'No list created :)',\r\n                    'success'\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n                        //Start Twitter all API's Implements by Amjad\r\n\r\n\r\n    create_empty_list_twitter() {\r\n        // let dashboard = this.current_dashboard;\r\n        //\r\n        // if (dashboard === 1) {\r\n        //     this.create_empty_list()\r\n        // }\r\n        // else if (dashboard === 6) {\r\n        //     this.create_empty_list_dd()\r\n        // }\r\n        // else if (dashboard === 2) {\r\n        Swal.fire({\r\n            title: 'Enter the name of list',\r\n            text: 'New list will be created',\r\n            type: 'question',\r\n            input: 'text',\r\n            preConfirm: (result) => {\r\n                return new Promise((resolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (result === '') {\r\n                            reject('List name cannot be empty')\r\n                        } else if (result.length > 30) {\r\n                            reject('Length of list name cannot be greater than 30')\r\n                        }\r\n                        else {\r\n                            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n                            headers.append('Content-Type', 'application/json');\r\n\r\n                            this.http.post(Config.api + '/ml/check_ilist_twitter/', JSON.stringify({\r\n                                    // name: result.value,\r\n                                    name: result,\r\n                                    username: this.currentUser.username\r\n                                }),\r\n                                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                                data => {\r\n                                    resolve()\r\n\r\n                                },\r\n                                error => {\r\n                                    if(error.status===406){\r\n                                    Swal.fire('List Already Exist')\r\n                                    }\r\n                                    // reject('List named \"' + result + '\" already exists')\r\n\r\n                                });\r\n                        }\r\n                    }, 2)\r\n                })\r\n            },\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Create',\r\n            cancelButtonText: 'Cancel'\r\n        }).then((result) => {\r\n\r\n\r\n            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n            headers.append('Content-Type', 'application/json');\r\n\r\n            this.http.post(Config.api + '/ml/create_add_ilist_twitter/', JSON.stringify({\r\n                    name: result.value,\r\n                    list: {},\r\n                    username: this.currentUser.username\r\n                }),\r\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                data => {\r\n                    this.loadTwitterLists(this.selected_choice_twitter);\r\n                    Swal.fire(\r\n                        'List created!',\r\n                        result.value(),\r\n                        'success'\r\n                    )\r\n                },\r\n                // error => {\r\n                //     Swal.fire(\r\n                //         'Try again after some time!',\r\n                //         error.toString(),\r\n                //         'error'\r\n                //     )\r\n                // }\r\n                );\r\n\r\n        }, function (dismiss) {\r\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'No list created :)',\r\n                    'success'\r\n                )\r\n            }\r\n        });\r\n    }\r\n    sort_lists_twitter() {\r\n\r\n        this.getTwLists(this.selected_choice_twitter);\r\n\r\n\r\n    }\r\n\r\n\r\n    sort_lists_peri() {\r\n\r\n        this.get_list_peri(this.selected_choice);\r\n\r\n\r\n    }\r\n\r\n    sort_lists_med() {\r\n\r\n        this.get_list_med(this.selected_choice);\r\n\r\n\r\n    }\r\n    sort_lists_fli() {\r\n\r\n        this.get_list_flkr(this.selected_choice);\r\n\r\n\r\n    }\r\n\r\n    //Function that add influencers in web lists.\r\n    select_add_influencers_twitter(id: number, name: string) {\r\n\r\n        localStorage.setItem('selected_list_twitter', JSON.stringify({id: id, name: name}));\r\n        this.router.navigate(['twitter/search'], {queryParams:{name: 'twitter'}});\r\n\r\n    }\r\n\r\n    go_to_list_twitter(e: number, name: string) {\r\n        this.router.navigate(['twitter/list/', e])\r\n\r\n    }\r\n\r\n    email_list_twitter(e: number, name: string) {\r\n\r\n\r\n    }\r\n\r\n    delete_list_twitter(id: number) {\r\n        // let dashboard = this.current_dashboard;\r\n        //\r\n        // if (dashboard === 1) {\r\n        //     this.delete_list(id);\r\n        // } else if (dashboard === 6) {\r\n        //     alert('blgoooooo')\r\n        //     this.delete_list_dd(id);\r\n        // } else if (dashboard === 2) {\r\n        let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n        headers.append('Content-Type', 'application/json');\r\n        let myhttp = this.http;\r\n        Swal.fire({\r\n\r\n            title: 'Deleted',\r\n            text: 'List has been deleted successfully',\r\n            // title: 'Are you sure?',\r\n            // text: 'You will not be able to recover this list!',\r\n            // type: 'warning',\r\n            // showCancelButton: true,\r\n            // confirmButtonText: 'Yes, delete it!',\r\n            // cancelButtonText: 'No, keep it'\r\n        }).then(() => {\r\n\r\n            myhttp.delete(Config.api + '/ml/delete_ilist_twitter/' + id,\r\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                data => {\r\n                    this.loadTwitterLists(this.selected_choice_twitter);\r\n\r\n                    // Swal.fire(\r\n                    //     'List Deleted!',\r\n                    //     '',\r\n                    //     'success'\r\n                    // )\r\n\r\n                },\r\n                error => {\r\n                    // alert('error')\r\n                    Swal.fire(\r\n                        'Try again after some time!',\r\n                        error.toString(),\r\n                        'error'\r\n                    )\r\n                });\r\n        }, function (dismiss) {\r\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'Your list is not deleted :)',\r\n                    'error'\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //Start Youtube all API's Implements by Amjad\r\n\r\n    email_list_yt(e: number, name: string) {\r\n        // localStorage.setItem('navigated_list',JSON.stringify({id:e,name:name}));\r\n        this.router.navigate(['email/settings/', e])\r\n    }\r\n    delete_list_yt(id: number) {\r\n\r\n        let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n        headers.append('Content-Type', 'application/json');\r\n        let myhttp = this.http;\r\n        Swal.fire({\r\n            title: 'Deleted',\r\n            text: 'List has been deleted successfully',\r\n            // title: 'Are you sure?',\r\n            // text: 'You will not be able to recover this list!',\r\n            // type: 'warning',\r\n            // showCancelButton: true,\r\n            // confirmButtonText: 'Yes, delete it!',\r\n            // cancelButtonText: 'No, keep it'\r\n        }).then(() => {\r\n\r\n            myhttp.delete(Config.api + '/delete_ilist_yt/' + id,\r\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                data => {\r\n                    this.get_lists_yt(this.selected_choice.replace('blog_influencer', 'youtube_influencer'));\r\n\r\n                    // Swal.fire(\r\n                    //     'List Deleted!',\r\n                    //     '',\r\n                    //     'success'\r\n                    // )\r\n\r\n                },\r\n                error => {\r\n                    // alert('error')\r\n                    Swal.fire(\r\n                        'Try again after some time!',\r\n                        error.toString(),\r\n                        'error'\r\n                    )\r\n                });\r\n        }, function (dismiss) {\r\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'Your list is not deleted :)',\r\n                    'error'\r\n                )\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n    sort_lists_yt() {\r\n        this.get_lists_yt(this.selected_choice.replace('blog_influencer', 'youtube_influencer'));\r\n    }\r\n    create_empty_list_yt() {\r\n\r\n        Swal.fire({\r\n            title: 'Enter the name of list',\r\n            text: 'New list will be created',\r\n            type: 'question',\r\n            input: 'text',\r\n            preConfirm: (result) => {\r\n                return new Promise((resolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (result === '') {\r\n                            reject('List name cannot be empty')\r\n                        } else if (result.length > 30) {\r\n                            reject('Length of list name cannot be greater than 30')\r\n                        }\r\n                        else {\r\n                            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n                            headers.append('Content-Type', 'application/json');\r\n\r\n                            this.http.post(Config.api + '/check_ilist_yt/', JSON.stringify({\r\n                                    // name: result.value,\r\n                                    name: result,\r\n                                    username: this.currentUser.username\r\n                                }),\r\n                                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                                data => {\r\n                                    resolve()\r\n\r\n                                },\r\n                                error => {\r\n                                    if(error.status===406){\r\n                                        Swal.fire('List Already Exist','error');\r\n                                    }\r\n                                    // reject('List named \"' + result + '\" already exists')\r\n\r\n                                });\r\n                        }\r\n                    }, 2)\r\n                })\r\n            },\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Create',\r\n            cancelButtonText: 'Cancel'\r\n        }).then((result) => {\r\n\r\n\r\n            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n            headers.append('Content-Type', 'application/json');\r\n\r\n            this.http.post(Config.api + '/create_add_ilist_yt/', JSON.stringify({\r\n                    name: result,\r\n                    // name: result.value,\r\n                    list: {},\r\n                    username: this.currentUser.username\r\n                }),\r\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                data => {\r\n                    this.get_lists_yt(this.selected_choice.replace('blog_influencer', 'youtube_influencer'));\r\n                    Swal.fire(\r\n                        'List created!',\r\n                        result.value(),\r\n                        'success'\r\n                    )\r\n                },\r\n                // error => {\r\n                //     Swal.fire(\r\n                //         'Try again after some time!',\r\n                //         error.toString(),\r\n                //         'error'\r\n                //     )\r\n                // }\r\n                );\r\n\r\n        }, function (dismiss) {\r\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'No list created :)',\r\n                    'success'\r\n                )\r\n            }\r\n        })\r\n    }\r\n    get_lists_yt(v) {\r\n        this.current_dashboard = 6;\r\n        this.loaded = false;\r\n        this.http.get(Config.api + '/get_iList_names_yt/' + this.currentUser.username + '/' + v + '/', null, 'small')\r\n            .subscribe(res => {\r\n                this.user_lists = res.json();\r\n                this.loaded = true;\r\n            });\r\n    }\r\n    select_add_influencers_yt(id: number, name: string) {\r\n\r\n        localStorage.setItem('selected_list_yt', JSON.stringify({id: id, name: name, }));\r\n\r\n        this.router.navigate(['youtube/search'], {queryParams:{name: 'youtube'}})\r\n\r\n    }\r\n    go_to_list_yt(e: number, name: string) {\r\n\r\n        this.router.navigate(['youtube/list/', e])\r\n\r\n    }\r\n\r\n\r\n\r\n    //Start Instagram all API's Implements by Amjad\r\n    sort_lists_in() {\r\n        this.get_lists_in(this.selected_choice.replace('blog_influencer', 'instagram_influencer'));\r\n    }\r\n    create_empty_list_in() {\r\n\r\n        Swal.fire({\r\n            title: 'Enter the name of list',\r\n            text: 'New list will be created',\r\n            type: 'question',\r\n            input: 'text',\r\n            preConfirm: (result) => {\r\n                return new Promise((resolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (result === '') {\r\n                            reject('List name cannot be empty')\r\n                        } else if (result.length > 30) {\r\n                            reject('Length of list name cannot be greater than 30')\r\n                        }\r\n                        else {\r\n                            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n                            headers.append('Content-Type', 'application/json');\r\n\r\n                            this.http.post(Config.api + '/check_ilist_in/', JSON.stringify({\r\n                                    // name: result.value,\r\n                                    name: result,\r\n                                    username: this.currentUser.username\r\n                                }),\r\n                                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                                data => {\r\n                                    resolve()\r\n\r\n                                },\r\n                                error => {\r\n                                    if(error.status===406){\r\n                                        Swal.fire('List already exist')\r\n                                    }\r\n                                    // reject('List named \"' + result + '\" already exists')\r\n\r\n                                });\r\n                        }\r\n                    }, 1)\r\n                })\r\n            },\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Create',\r\n            cancelButtonText: 'Cancel'\r\n        }).then((result) => {\r\n\r\n\r\n            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n            headers.append('Content-Type', 'application/json');\r\n\r\n            this.http.post(Config.api + '/create_add_ilist_in/', JSON.stringify({\r\n                    name: result.value,\r\n                    list: {},\r\n                    username: this.currentUser.username\r\n                }),\r\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                data => {\r\n                    this.get_lists_in(this.selected_choice.replace('blog_influencer', 'instagram_influencer'));\r\n                    Swal.fire(\r\n                        'List created!',\r\n                        result.value(),\r\n                        'success'\r\n                    )\r\n                },\r\n                // error => {\r\n                //     Swal.fire(\r\n                //         'Try again after some time!',\r\n                //         error.toString(),\r\n                //         'error'\r\n                //     )\r\n                // }\r\n                );\r\n\r\n        }, function (dismiss) {\r\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'No list created :)',\r\n                    'success'\r\n                )\r\n            }\r\n        })\r\n    }\r\n    get_lists_in(v) {\r\n        this.loaded = false;\r\n        this.http.get(Config.api + '/get_iList_names_in/' + this.currentUser.username + '/' + v + '/', null, 'small')\r\n            .subscribe(res => {\r\n                this.user_lists = res.json();\r\n                this.loaded = true;\r\n            });\r\n    }\r\n    select_add_influencers_in(id: number, name: string) {\r\n        localStorage.setItem('selected_list_in', JSON.stringify({id: id, name: name}));\r\n        this.router.navigate(['instagram/search'],{queryParams:{name: 'instagram'}})\r\n\r\n    }\r\n    select_add_influencers_pt(id: number, name: string){\r\n        localStorage.setItem('selected_list_pt', JSON.stringify({id: id, name: name}));\r\n        this.router.navigate(['/pinterest/search'],{queryParams:{name:'pinterest'}});\r\n    }\r\n    go_to_list_in(e: number, name: string) {\r\n\r\n        this.router.navigate(['instagram/list/', e])\r\n\r\n    }\r\n    email_list_in(e: number, name: string) {\r\n        // localStorage.setItem('navigated_list',JSON.stringify({id:e,name:name}));\r\n        this.router.navigate(['email/settings/', e])\r\n    }\r\n    delete_list_in(id: number) {\r\n\r\n        let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n        headers.append('Content-Type', 'application/json');\r\n        let myhttp = this.http;\r\n        Swal.fire({\r\n            title: 'Deleted',\r\n            text: 'List has been deleted successfully',\r\n            // title: 'Are you sure?',\r\n            // text: 'You will not be able to recover this list!',\r\n            // type: 'warning',\r\n            // showCancelButton: true,\r\n            // confirmButtonText: 'Yes, delete it!',\r\n            // cancelButtonText: 'No, keep it'\r\n        }).then(() => {\r\n\r\n            myhttp.delete(Config.api + '/delete_ilist_in/' + id,\r\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                data => {\r\n                    this.get_lists_in(this.selected_choice.replace('blog_influencer', 'instagram_influencer'));\r\n\r\n                    // Swal.fire(\r\n                    //     'List Deleted!',\r\n                    //     '',\r\n                    //     'success'\r\n                    // )\r\n\r\n                },\r\n                error => {\r\n                    // alert('error')\r\n                    Swal.fire(\r\n                        'Try again after some time!',\r\n                        error.toString(),\r\n                        'error'\r\n                    )\r\n                });\r\n        }, function (dismiss) {\r\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'Your list is not deleted :)',\r\n                    'error'\r\n                )\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    // Start Facebook  all API's Implements by Amjad\r\n    get_lists_fb(v){\r\n        this.loaded=false;\r\n        this.http.get(Config.api + '/get_iLists_names_fb/'+ this.currentUser.username+ '/'+ v+ '/', null, '')\r\n            .subscribe(res=>{\r\n                this.user_lists = res.json();\r\n                this.loaded=true;\r\n            });\r\n    }\r\n    select_add_influencers_fb(id: number, name:string){\r\n        localStorage.setItem('select_list_fb', JSON.stringify({id: id, name: name}));\r\n        this.router.navigate(['facebook/search'], {queryParams: {name:'facebook'}});\r\n    }\r\n    create_empty_list_fb() {\r\n\r\n        Swal.fire({\r\n            title: 'Enter the name of list',\r\n            text: 'New list will be created',\r\n            type: 'question',\r\n            input: 'text',\r\n            preConfirm: (result) => {\r\n                return new Promise((resolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (result === '') {\r\n                            reject('List name cannot be empty')\r\n                        } else if (result.length > 30) {\r\n                            reject('Length of list name cannot be greater than 30')\r\n                        }\r\n                        else {\r\n                            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n                            headers.append('Content-Type', 'application/json');\r\n\r\n                            this.http.post(Config.api + '/check_ilist_fb/', JSON.stringify({\r\n                                    name: result,\r\n                                    // name: result.value,\r\n                                    username: this.currentUser.username\r\n                                }),\r\n                                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                                data => {\r\n                                    resolve()\r\n\r\n                                },\r\n                                error => {\r\n                                    if(error.status===406){\r\n                                            Swal.fire('List Already Exist','error');\r\n                                        }\r\n                                    // reject('List named \"' + result + '\" already exists')\r\n\r\n                                });\r\n                        }\r\n                    }, 2)\r\n                })\r\n            },\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Create',\r\n            cancelButtonText: 'Cancel'\r\n        }).then((result) => {\r\n\r\n\r\n            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n            headers.append('Content-Type', 'application/json');\r\n\r\n            this.http.post(Config.api + '/create_add_ilist_fb/', JSON.stringify({\r\n                    name: result.value,\r\n                    list: {},\r\n                    username: this.currentUser.username\r\n                }),\r\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                data => {\r\n                    this.get_list_fb(this.selected_choice);\r\n                    Swal.fire(\r\n                        'List created!',\r\n                        result.value(),\r\n                        'success'\r\n                    )\r\n                },\r\n                // error => {\r\n                //     Swal.fire(\r\n                //         'Try again after some time!',\r\n                //         error.toString(),\r\n                //         'error'\r\n                //     )\r\n                // }\r\n                );\r\n\r\n        }, function (dismiss) {\r\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'No list created :)',\r\n                    'success'\r\n                )\r\n            }\r\n        })\r\n    }\r\n    delete_list_fb(id: number) {\r\n\r\n\r\n        let headers = new Headers({'Authorization': 'JWT' + this.currentUser['token']}) ;\r\n        headers.append('Content-Type', 'application/json');\r\n        Swal.fire({\r\n            title: 'Deleted',\r\n            text: 'List has been deleted successfully',\r\n            // title: 'Are you Sure?',\r\n            // text: 'You will not be able to recover this list!',\r\n            // showCancelButton: true,\r\n            // confirmButtonText: 'Yes, delete it!',\r\n            // cancelButtonText: 'No, keep it'\r\n\r\n        }).then(() => {\r\n            headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n            headers.append('Content-Type', 'application/json');\r\n            this.http.delete(Config.api + '/delete_ilist_fb/' + id,\r\n                {headers: headers}).map((responce: Response) => responce.json()).subscribe(\r\n                data => {\r\n                    this.get_list_fb(this.selected_choice);\r\n                    // Swal.fire(\r\n                    //     'List Deleted!',\r\n                    //     '',\r\n                    //     'success'\r\n                    // )\r\n                },\r\n                error => {\r\n                    // alert('error')\r\n                    Swal.fire(\r\n                        'Try again after some time!',\r\n                        error.toString(),\r\n                        'error'\r\n                    )\r\n                }\r\n\r\n\r\n\r\n            )\r\n        }, function (dismiss) {\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'Your list is not deleted :)',\r\n                    'error'\r\n                )\r\n            }\r\n        })\r\n\r\n\r\n\r\n        \r\n    }\r\n    go_to_list_fb(e: number, name: string) {\r\n\r\n        this.router.navigate(['facebook/list/', e])\r\n\r\n    }\r\n    sort_lists_fb(){\r\n        this.get_list_fb(this.selected_choice);\r\n    }\r\n    get_list_fb(v) {\r\n        this.loaded = false;\r\n        this.http.get(Config.api + '/get_iList_names_fb/' + this.currentUser.username + '/' + v + '/', null, 'small')\r\n            .subscribe(res => {\r\n                this.user_lists = res.json(),\r\n                    this.loaded = true;\r\n            })\r\n    }\r\n\r\n\r\n    // Start Linkedin  all API's Implements by Amjad\r\n    go_to_list_lnkd(e:number, name: string){\r\n        this.router.navigate(['linkedin/list/', e])\r\n    }\r\n    get_list_lnkd(v){\r\n        this.loaded=false;\r\n        this.http.get(Config.api+ '/get_iList_names_ld/'+ this.currentUser.username + '/'+ v + '/', null, 'small')\r\n            .subscribe(res=> {\r\n                this.user_lists= res.json();\r\n                this.loaded=true;\r\n            })\r\n    }\r\n    create_empty_list_lnkd() {\r\n\r\n        Swal.fire({\r\n            title: 'Enter the name of list',\r\n            text: 'New list will be created',\r\n            type: 'question',\r\n            input: 'text',\r\n            preConfirm: (result) => {\r\n                return new Promise((resolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (result === '') {\r\n                            reject('List name cannot be empty')\r\n                        } else if (result.length > 30) {\r\n                            reject('Length of list name cannot be greater than 30')\r\n                        }\r\n                        else {\r\n                            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n                            headers.append('Content-Type', 'application/json');\r\n\r\n                            this.http.post(Config.api + '/check_ilist_ld/', JSON.stringify({\r\n                                    name: result.value,\r\n                                    username: this.currentUser.username\r\n                                }),\r\n                                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                                data => {\r\n                                    resolve()\r\n\r\n                                },\r\n                                error => {\r\n                                    reject('List named \"' + result + '\" already exists')\r\n\r\n                                });\r\n                        }\r\n                    }, 2)\r\n                })\r\n            },\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Create',\r\n            cancelButtonText: 'Cancel'\r\n        }).then((result) => {\r\n\r\n\r\n            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n            headers.append('Content-Type', 'application/json');\r\n\r\n            this.http.post(Config.api + '/create_add_ilist_ld/', JSON.stringify({\r\n                    name: result.value,\r\n                    list: {},\r\n                    username: this.currentUser.username\r\n                }),\r\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                data => {\r\n                    this.get_list_lnkd(this.selected_choice);\r\n                    Swal.fire(\r\n                        'List created!',\r\n                        result.value(),\r\n                        'success'\r\n                    )\r\n                },\r\n                // error => {\r\n                //     Swal.fire(\r\n                //         'Try again after some time!',\r\n                //         error.toString(),\r\n                //         'error'\r\n                //     )\r\n                // }\r\n                );\r\n\r\n        }, function (dismiss) {\r\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'No list created :)',\r\n                    'success'\r\n                )\r\n            }\r\n        })\r\n    }\r\n    sort_list_lnkd(){\r\n        this.get_list_lnkd(this.selected_choice)\r\n    }\r\n    select_add_influencers_lnkd(id: number, name:string){\r\n        localStorage.setItem('select_list_linkin', JSON.stringify({id: id, name: name}));\r\n        this.router.navigate(['linkedin/search'], {queryParams:{name: 'linkedIn'}})\r\n    }\r\n    delete_ilist_lnkd(id: number) {\r\n        let headers = new Headers({'Authorization': 'JWT' + this.currentUser['token']}) ;\r\n        headers.append('Content-Type', 'application/json');\r\n        Swal.fire({\r\n            title: 'Deleted',\r\n            text: 'List has been deleted successfully',\r\n            // title: 'Are you Sure?',\r\n            // text: 'You will not be able to recover this list!',\r\n            // showCancelButton: true,\r\n            // confirmButtonText: 'Yes, delete it!',\r\n            // cancelButtonText: 'No, keep it'\r\n\r\n        }).then(() => {\r\n            headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n            headers.append('Content-Type', 'application/json');\r\n            this.http.delete(Config.api + '/delete_ilist_ld/' + id,\r\n                {headers: headers}).map((responce: Response) => responce.json()).subscribe(\r\n                data => {\r\n                    this.get_list_lnkd(this.selected_choice);\r\n                    // Swal.fire(\r\n                    //     'List Deleted!',\r\n                    //     '',\r\n                    //     'success'\r\n                    // )\r\n                },\r\n                error => {\r\n                    // alert('error')\r\n                    Swal.fire(\r\n                        'Try again after some time!',\r\n                        error.toString(),\r\n                        'error'\r\n                    )\r\n                }\r\n\r\n\r\n\r\n            )\r\n        }, function (dismiss) {\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'Your list is not deleted :)',\r\n                    'error'\r\n                )\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    // Start BlogoSphere  all API's Implements by Amjad\r\n    sort_lists_dd() {\r\n        this.get_lists_dd(this.selected_choice);\r\n    }\r\n    create_empty_list_dd() {\r\n\r\n        Swal.fire({\r\n            title: 'Enter the name of list',\r\n            text: 'New list will be created',\r\n            type: 'question',\r\n            input: 'text',\r\n            preConfirm: (result) => {\r\n                return new Promise((resolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (result === '') {\r\n                            reject('List name cannot be empty')\r\n                        } else if (result.length > 30) {\r\n                            reject('Length of list name cannot be greater than 30')\r\n                        }\r\n                        else {\r\n                            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n                            headers.append('Content-Type', 'application/json');\r\n\r\n                            this.http.post(Config.api + '/check_ilist_dd/', JSON.stringify({\r\n                                    name: result,\r\n                                    // name: result.value,\r\n                                    username: this.currentUser.username\r\n                                }),\r\n                                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                                data => {\r\n                                    resolve()\r\n\r\n                                },\r\n                                error => {\r\n                                    reject('List named \"' + result + '\" already exists')\r\n\r\n                                });\r\n                        }\r\n                    }, 2)\r\n                })\r\n            },\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Create',\r\n            cancelButtonText: 'Cancel'\r\n        }).then((result) => {\r\n\r\n\r\n            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n            headers.append('Content-Type', 'application/json');\r\n\r\n            this.http.post(Config.api + '/create_add_ilist_dd/', JSON.stringify({\r\n                    name: result.value,\r\n                    list: {},\r\n                    username: this.currentUser.username\r\n                }),\r\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                data => {\r\n                    this.get_lists_dd(this.selected_choice);\r\n                    Swal.fire(\r\n                        'List created!',\r\n                        result.value(),\r\n                        'success'\r\n                    )\r\n                },\r\n                // error => {\r\n                //     Swal.fire(\r\n                //         'Try again after some time!',\r\n                //         error.toString(),\r\n                //         'error'\r\n                //     )\r\n                // }\r\n                );\r\n\r\n        }, function (dismiss) {\r\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'No list created :)',\r\n                    'success'\r\n                )\r\n            }\r\n        })\r\n    }\r\n    get_lists_dd(v) {\r\n        this.current_dashboard = 6;\r\n        this.loaded = false;\r\n        this.http.get(Config.api + '/get_iList_names_dd/' + this.currentUser.username + '/' + v + '/', null, 'small')\r\n            .subscribe(res => {\r\n                this.user_lists = res.json();\r\n                this.loaded = true;\r\n            });\r\n    }\r\n    select_add_influencers_dd(id: number, name: string) {\r\n        localStorage.setItem('selected_list_dd', JSON.stringify({id: id, name: name}));\r\n        this.router.navigate(['blogosphere/search'],{queryParams: {name: 'blog'}})\r\n\r\n\r\n    }\r\n    go_to_list_dd(e: number, name: string) {\r\n\r\n        this.router.navigate(['blogosphere/list/', e])\r\n\r\n    }\r\n    email_list_dd(e: number, name: string) {\r\n        // localStorage.setItem('navigated_list',JSON.stringify({id:e,name:name}));\r\n        this.router.navigate(['email/settings/', e])\r\n    }\r\n    delete_list_dd(id: number) {\r\n\r\n        let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n        headers.append('Content-Type', 'application/json');\r\n        let myhttp = this.http;\r\n        Swal.fire({\r\n            title: 'Deleted',\r\n            text: 'List has been deleted successfully',\r\n            // title: 'Are you sure?',\r\n            // text: 'You will not be able to recover this list!',\r\n            // type: 'warning',\r\n            // showCancelButton: true,\r\n            // confirmButtonText: 'Yes, delete it!',\r\n            // cancelButtonText: 'No, keep it'\r\n        }).then(() => {\r\n\r\n            myhttp.delete(Config.api + '/delete_ilist_dd/' + id,\r\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                data => {\r\n                    this.get_lists_dd(this.selected_choice);\r\n\r\n                    // Swal.fire(\r\n                    //     'List Deleted!',\r\n                    //     '',\r\n                    //     'success'\r\n                    // )\r\n\r\n                },\r\n                error => {\r\n                    // alert('error')\r\n                    Swal.fire(\r\n                        'Try again after some time!',\r\n                        error.toString(),\r\n                        'error'\r\n                    )\r\n                });\r\n        }, function (dismiss) {\r\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'Your list is not deleted :)',\r\n                    'error'\r\n                )\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n    get_lists(v) {\r\n\r\n        this.loaded = false;\r\n        this.http.get(Config.api + '/get_iList_names/' + this.currentUser.username + '/' + v + '/', null, 'small')\r\n            .subscribe(res => {\r\n                this.user_lists = res.json();\r\n                this.user_lists_web = res.json().results;\r\n                this.loaded = true;\r\n            });\r\n\r\n\r\n    }\r\n\r\n\r\n    // Start Pinterests  all API's Implements by Amjad\r\n    sort_list_pt(){\r\n        this.get_list_pinterest(this.selected_choice)\r\n    }\r\n    delete_ilist_pt(id: number) {\r\n        let headers = new Headers({'Authorization': 'JWT' + this.currentUser['token']}) ;\r\n        headers.append('Content-Type', 'application/json');\r\n        Swal.fire({\r\n            title: 'Deleted',\r\n            text: 'List has been deleted successfully',\r\n            // title: 'Are you Sure?',\r\n            // text: 'You will not be able to recover this list!',\r\n            // showCancelButton: true,\r\n            // confirmButtonText: 'Yes, delete it!',\r\n            // cancelButtonText: 'No, keep it'\r\n\r\n        }).then(() => {\r\n            headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n            headers.append('Content-Type', 'application/json');\r\n            this.http.delete(Config.api + '/delete_ilist_pt/' + id,\r\n                {headers: headers}).map((responce: Response) => responce.json()).subscribe(\r\n                data => {\r\n                    this.get_list_pinterest(this.selected_choice);\r\n                    // Swal.fire(\r\n                    //     'List Deleted!',\r\n                    //     '',\r\n                    //     'success'\r\n                    // )\r\n                },\r\n                error => {\r\n                    // alert('error')\r\n                    Swal.fire(\r\n                        'Try again after some time!',\r\n                        error.toString(),\r\n                        'error'\r\n                    )\r\n                }\r\n\r\n\r\n\r\n            )\r\n        }, function (dismiss) {\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'Your list is not deleted :)',\r\n                    'error'\r\n                )\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n\r\n    delete_ilist_peri(id: number) {\r\n        let headers = new Headers({'Authorization': 'JWT' + this.currentUser['token']}) ;\r\n        headers.append('Content-Type', 'application/json');\r\n        Swal.fire({\r\n            title: 'Deleted',\r\n            text: 'List has been deleted successfully',\r\n            // title: 'Are you Sure?',\r\n            // text: 'You will not be able to recover this list!',\r\n            // showCancelButton: true,\r\n            // confirmButtonText: 'Yes, delete it!',\r\n            // cancelButtonText: 'No, keep it'\r\n\r\n        }).then(() => {\r\n            headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n            headers.append('Content-Type', 'application/json');\r\n            this.http.delete(Config.api + '/delete_ilist_periscope/' + id,\r\n                {headers: headers}).map((responce: Response) => responce.json()).subscribe(\r\n                data => {\r\n                    this.get_list_peri(this.selected_choice);\r\n                    // Swal.fire(\r\n                    //     'List Deleted!',\r\n                    //     '',\r\n                    //     'success'\r\n                    // )\r\n                },\r\n                error => {\r\n                    // alert('error')\r\n                    Swal.fire(\r\n                        'Try again after some time!',\r\n                        error.toString(),\r\n                        'error'\r\n                    )\r\n                }\r\n\r\n\r\n\r\n            )\r\n        }, function (dismiss) {\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'Your list is not deleted :)',\r\n                    'error'\r\n                )\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n    delete_ilist_med(id: number) {\r\n        let headers = new Headers({'Authorization': 'JWT' + this.currentUser['token']}) ;\r\n        headers.append('Content-Type', 'application/json');\r\n        Swal.fire({\r\n            title: 'Deleted',\r\n            text: 'List has been deleted successfully',\r\n            // title: 'Are you Sure?',\r\n            // text: 'You will not be able to recover this list!',\r\n            // showCancelButton: true,\r\n            // confirmButtonText: 'Yes, delete it!',\r\n            // cancelButtonText: 'No, keep it'\r\n\r\n        }).then(() => {\r\n            headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n            headers.append('Content-Type', 'application/json');\r\n            this.http.delete(Config.api + '/delete_ilist_md/' + id,\r\n                {headers: headers}).map((responce: Response) => responce.json()).subscribe(\r\n                data => {\r\n                    this.get_list_med(this.selected_choice);\r\n                    // Swal.fire(\r\n                    //     'List Deleted!',\r\n                    //     '',\r\n                    //     'success'\r\n                    // )\r\n                },\r\n                error => {\r\n                    // alert('error')\r\n                    Swal.fire(\r\n                        'Try again after some time!',\r\n                        error.toString(),\r\n                        'error'\r\n                    )\r\n                }\r\n\r\n\r\n\r\n            )\r\n        }, function (dismiss) {\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'Your list is not deleted :)',\r\n                    'error'\r\n                )\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    go_to_list_pt(e: number, name: string){\r\n        this.router.navigate(['pinterest/list/', e])\r\n    }\r\n\r\n    go_to_list_peri(e: number, name: string){\r\n        this.router.navigate(['periscope/list/', e])\r\n    }\r\n\r\n    go_to_list_med(e: number, name: string){\r\n        this.router.navigate(['medium/list/', e])\r\n    }\r\n    go_to_list_flkr(e: number, name: string){\r\n        this.router.navigate(['flickr/list/', e])\r\n    }\r\n    select_add_influencers_peri(id: number, name: string){\r\n        localStorage.setItem('selected_list_peri', JSON.stringify({id: id, name: name}));\r\n        this.router.navigate(['/periscope/search'],{queryParams:{name:'periscope'}});\r\n    }\r\n\r\n    select_add_influencers_med(id: number, name: string){\r\n        localStorage.setItem('selected_list_med', JSON.stringify({id: id, name: name}));\r\n        this.router.navigate(['/medium/search'],{queryParams:{name:'medium'}});\r\n    }\r\n    select_add_influencers_flkr(id: number, name: string){\r\n        localStorage.setItem('selected_list_fl', JSON.stringify({id: id, name: name}));\r\n        this.router.navigate(['/flickr/search'],{queryParams:{name:'flickr'}});\r\n    }\r\n    create_empty_list_pt() {\r\n\r\n        Swal.fire({\r\n            title: 'Enter the name of list',\r\n            text: 'New list will be created',\r\n            type: 'question',\r\n            input: 'text',\r\n            preConfirm: (result) => {\r\n                return new Promise((resolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (result === '') {\r\n                            reject('List name cannot be empty')\r\n                        } else if (result.length > 30) {\r\n                            reject('Length of list name cannot be greater than 30')\r\n                        }\r\n                        else {\r\n                            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n                            headers.append('Content-Type', 'application/json');\r\n\r\n                            this.http.post(Config.api + '/check_ilist_pt/', JSON.stringify({\r\n                                    // name: result.value,\r\n                                    name: result,\r\n                                    username: this.currentUser.username\r\n                                }),\r\n                                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                                data => {\r\n                                    resolve()\r\n\r\n                                },\r\n                                error => {\r\n                                    reject('List named \"' + result + '\" already exists')\r\n\r\n                                });\r\n                        }\r\n                    }, 2)\r\n                })\r\n            },\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Create',\r\n            cancelButtonText: 'Cancel'\r\n        }).then((result) => {\r\n\r\n\r\n            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n            headers.append('Content-Type', 'application/json');\r\n\r\n            this.http.post(Config.api + '/create_add_ilist_pt/', JSON.stringify({\r\n                    name: result.value,\r\n                    list: {},\r\n                    username: this.currentUser.username\r\n                }),\r\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                data => {\r\n                    this.get_list_pinterest(this.selected_choice);\r\n                    Swal.fire(\r\n                        'List created!',\r\n                        result.value(),\r\n                        'success'\r\n                    )\r\n                },\r\n                // error => {\r\n                //     Swal.fire(\r\n                //         'Try again after some time!',\r\n                //         error.toString(),\r\n                //         'error'\r\n                //     )\r\n                // }\r\n                );\r\n\r\n        }, function (dismiss) {\r\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'No list created :)',\r\n                    'success'\r\n                )\r\n            }\r\n        })\r\n    }\r\n    // get_list_pinterest(v) {\r\n    //     this.loaded=false;\r\n    //     this.http.get(Config.api + '/get_iList_names_pt/'+ this.currentUser.username+ '/'+ v + '/', null, 'samll')\r\n    //         .subscribe(res=> {\r\n    //             this.user_lists= res.json();\r\n    //             this.loaded= true;\r\n    //         })\r\n    // }\r\n\r\n    get_list_pinterest(v) {\r\n\r\n        this.loaded = false;\r\n        this.http.get(Config.api + '/get_iList_names_pt/' + this.currentUser.username + '/' + v + '/', null, 'small')\r\n            .subscribe(res => {\r\n                this.user_lists = res.json();\r\n                this.loaded = true;\r\n            });\r\n\r\n\r\n    }\r\n\r\n    delete_ilist_flkr(id: number) {\r\n        let headers = new Headers({'Authorization': 'JWT' + this.currentUser['token']});\r\n        headers.append('Content-Type', 'application/json');\r\n        Swal.fire({\r\n            title: 'Deleted',\r\n            text: 'List has been deleted successfully',\r\n            // title: 'Are you Sure?',\r\n            // text: 'You will not be able to recover this list!',\r\n            // showCancelButton: true,\r\n            // confirmButtonText: 'Yes, delete it!',\r\n            // cancelButtonText: 'No, keep it'\r\n\r\n        }).then(() => {\r\n            headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n            headers.append('Content-Type', 'application/json');\r\n            this.http.delete(Config.api + '/delete_ilist_fl/' + id,\r\n                {headers: headers}).map((responce: Response) => responce.json()).subscribe(\r\n                data => {\r\n                    this.get_list_flkr(this.selected_choice);\r\n                    // Swal.fire(\r\n                    //     'List Deleted!',\r\n                    //     '',\r\n                    //     'success'\r\n                    // )\r\n                },\r\n                error => {\r\n                    // alert('error')\r\n                    Swal.fire(\r\n                        'Try again after some time!',\r\n                        error.toString(),\r\n                        'error'\r\n                    )\r\n                }\r\n            )\r\n        }, function (dismiss) {\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'Your list is not deleted :)',\r\n                    'error'\r\n                )\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n\r\n        get_list_med(v) {\r\n\r\n        this.loaded = false;\r\n        this.http.get(Config.api + '/get_iList_names_md/' + this.currentUser.username + '/' + v + '/', null, 'small')\r\n            .subscribe(res => {\r\n                this.user_lists = res.json();\r\n                this.loaded = true;\r\n            });\r\n\r\n\r\n    }\r\n    get_list_flkr(v) {\r\n\r\n        this.loaded = false;\r\n        this.http.get(Config.api + '/get_iList_names_fl/' + this.currentUser.username + '/' + v + '/', null, 'small')\r\n            .subscribe(res => {\r\n                this.user_lists = res.json();\r\n                this.loaded = true;\r\n            });\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    get_list_peri(v) {\r\n\r\n        this.loaded = false;\r\n        this.http.get(Config.api + '/get_iList_names_periscope/' + this.currentUser.username + '/' + v + '/', null, 'small')\r\n            .subscribe(res => {\r\n                this.user_lists = res.json();\r\n                this.loaded = true;\r\n            });\r\n\r\n\r\n    }\r\n\r\n\r\n                //Others Functions\r\n    loadTwitterLists(v) {\r\n        // this.current_dashboard = 2;\r\n        this.getTwLists(v);\r\n        // this.load_all_lists(v, this.current_dashboard);\r\n\r\n    }\r\n    getTwLists(v) {\r\n        this.current_dashboard = 2;\r\n        let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n        headers.append('Content-Type', 'application/json');\r\n        this.loaded = false;\r\n        this.http.get(Config.api + '/ml/get_iList_names_twitter/' + this.currentUser.username + '/' + v + '/', {headers: headers}, 'small')\r\n            .subscribe(res => {\r\n                this.user_lists = res.json();\r\n                this.loaded = true;\r\n            });\r\n    }\r\n    selectedIndexChange(e) {\r\n        if (e === 0) {\r\n            this.get_lists('-id')\r\n        } else if (e === 1) {\r\n            this.loadTwitterLists('-id');\r\n        } else if (e === 2) {\r\n            this.get_lists_dd('-id');\r\n\r\n        } else if (e === 3) {\r\n            this.get_lists_yt('-id');\r\n\r\n        } else if (e === 4) {\r\n            this.get_lists_in('-id');\r\n        } else if (e === 5 ) {\r\n            this.get_list_fb('-id');\r\n        }\r\n        else if(e===6){\r\n            this.get_list_lnkd('-id');\r\n        }\r\n        else if(e===7){\r\n            this.get_list_pinterest('-id');\r\n        }\r\n        else if(e===8){\r\n            this.get_list_peri('-id');\r\n        }\r\n\r\n        else if(e===9){\r\n            this.get_list_med('-id');\r\n        }\r\n        else if(e===10){\r\n            this.get_list_flkr('-id');\r\n        }\r\n    }\r\n    openNav() {\r\n        document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n    }\r\n\r\n    create_empty_list_peri() {\r\n\r\n        Swal.fire({\r\n            title: 'Enter the name of list',\r\n            text: 'New list will be created',\r\n            type: 'question',\r\n            input: 'text',\r\n            preConfirm: (result) => {\r\n                return new Promise((resolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (result === '') {\r\n                            reject('List name cannot be empty')\r\n                        } else if (result.length > 30) {\r\n                            reject('Length of list name cannot be greater than 30')\r\n                        }\r\n                        else {\r\n                            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n                            headers.append('Content-Type', 'application/json');\r\n\r\n                            this.http.post(Config.api + '/check_ilist_periscope/', JSON.stringify({\r\n                                    name: result,\r\n                                    // name: result.value,\r\n                                    username: this.currentUser.username\r\n                                }),\r\n                                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                                data => {\r\n                                    resolve()\r\n\r\n                                },\r\n                                error => {\r\n                                    reject('List named \"' + result + '\" already exists')\r\n\r\n                                });\r\n                        }\r\n                    }, 2)\r\n                })\r\n            },\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Create',\r\n            cancelButtonText: 'Cancel'\r\n        }).then((result) => {\r\n\r\n\r\n            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n            headers.append('Content-Type', 'application/json');\r\n\r\n            this.http.post(Config.api + '/create_add_ilist_periscope/', JSON.stringify({\r\n                    name: result.value,\r\n                    list: {},\r\n                    username: this.currentUser.username\r\n                }),\r\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                data => {\r\n                    this.get_list_peri(this.selected_choice);\r\n                    Swal.fire(\r\n                        'List created!',\r\n                        result.value,\r\n                        'success'\r\n                    );\r\n                  console.log('Result is..................', result.value);\r\n                },\r\n                // error => {\r\n                //     Swal.fire(\r\n                //         'Try again after some time!',\r\n                //         error.toString(),\r\n                //         'error'\r\n                //     )\r\n                // }\r\n                );\r\n\r\n        }, function (dismiss) {\r\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'No list created :)',\r\n                    'success'\r\n                )\r\n            }\r\n        })\r\n    }\r\n    create_empty_list_med() {\r\n\r\n        Swal.fire({\r\n            title: 'Enter the name of list',\r\n            text: 'New list will be created',\r\n            type: 'question',\r\n            input: 'text',\r\n            preConfirm: (result) => {\r\n                return new Promise((resolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (result === '') {\r\n                            reject('List name cannot be empty')\r\n                        } else if (result.length > 30) {\r\n                            reject('Length of list name cannot be greater than 30')\r\n                        }\r\n                        else {\r\n                            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n                            headers.append('Content-Type', 'application/json');\r\n\r\n                            this.http.post(Config.api + '/check_ilist_md/', JSON.stringify({\r\n                                    // name: result.value,\r\n                                    name: result,\r\n                                    username: this.currentUser.username\r\n                                }),\r\n                                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                                data => {\r\n                                    resolve()\r\n\r\n                                },\r\n                                error => {\r\n                                    reject('List named \"' + result + '\" already exists')\r\n\r\n                                });\r\n                        }\r\n                    }, 2)\r\n                })\r\n            },\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Create',\r\n            cancelButtonText: 'Cancel'\r\n        }).then((result) => {\r\n\r\n\r\n            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n            headers.append('Content-Type', 'application/json');\r\n\r\n            this.http.post(Config.api + '/create_add_ilist_md/', JSON.stringify({\r\n                    name: result.value,\r\n                    list: {},\r\n                    username: this.currentUser.username\r\n                }),\r\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                data => {\r\n                    this.get_list_med(this.selected_choice);\r\n                    Swal.fire(\r\n                        'List created!',\r\n                        result.value(),\r\n                        'success'\r\n                    )\r\n                },\r\n                // error => {\r\n                //     Swal.fire(\r\n                //         'Try again after some time!',\r\n                //         error.toString(),\r\n                //         'error'\r\n                //     )\r\n                // }\r\n                );\r\n\r\n        }, function (dismiss) {\r\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'No list created :)',\r\n                    'success'\r\n                )\r\n            }\r\n        })\r\n    }\r\n    create_empty_list_flkr() {\r\n\r\n        Swal.fire({\r\n            title: 'Enter the name of list',\r\n            text: 'New list will be created',\r\n            type: 'question',\r\n            input: 'text',\r\n            preConfirm: (result) => {\r\n                return new Promise((resolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (result === '') {\r\n                            reject('List name cannot be empty')\r\n                        } else if (result.length > 30) {\r\n                            reject('Length of list name cannot be greater than 30')\r\n                        }\r\n                        else {\r\n                            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n                            headers.append('Content-Type', 'application/json');\r\n\r\n                            this.http.post(Config.api + '/check_ilist_fl/', JSON.stringify({\r\n                                    name: result.value,\r\n                                    username: this.currentUser.username\r\n                                }),\r\n                                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                                data => {\r\n                                    resolve()\r\n\r\n                                },\r\n                                error => {\r\n                                    reject('List named \"' + result + '\" already exists')\r\n\r\n                                });\r\n                        }\r\n                    }, 2)\r\n                })\r\n            },\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Create',\r\n            cancelButtonText: 'Cancel'\r\n        }).then((result) => {\r\n\r\n\r\n            let headers = new Headers({'Authorization': 'JWT ' + this.currentUser['token']});\r\n            headers.append('Content-Type', 'application/json');\r\n\r\n            this.http.post(Config.api + '/create_add_ilist_fl/', JSON.stringify({\r\n                    name: result.value,\r\n                    list: {},\r\n                    username: this.currentUser.username\r\n                }),\r\n                {headers: headers}).map((response: Response) => response.json()).subscribe(\r\n                data => {\r\n                    this.get_list_flkr(this.selected_choice);\r\n                    Swal.fire(\r\n                        'List created!',\r\n                        result.value(),\r\n                        'success'\r\n                    )\r\n                },\r\n                // error => {\r\n                //     Swal.fire(\r\n                //         'Try again after some time!',\r\n                //         error.toString(),\r\n                //         'error'\r\n                //     )\r\n                // }\r\n                );\r\n\r\n        }, function (dismiss) {\r\n            // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\r\n            if (dismiss === 'cancel') {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'No list created :)',\r\n                    'success'\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport {DashboardRoutes} from \"./userdashboard.routing\";\r\nimport {LoaderModule} from '../loader/loader.module';\r\nimport {UserdashboardTemplateComponent} from \"./userdashboard-template.component\";\r\nimport {MatSelectModule, MatTabsModule,  MatListModule, MatTableModule,\r\n  MatCardModule, MatFormFieldModule, MatInputModule, MatRippleModule} from \"@angular/material\";\r\nimport {FormsModule} from \"@angular/forms\";\r\nimport {PreloaderModule} from \"../components/preloader.module\";\r\nimport {CdkTableModule} from '@angular/cdk/table';\r\n\r\n\r\nimport {} from '@angular/material';\r\n\r\n\r\n@NgModule({\r\n    imports: [CommonModule,\r\n        LoaderModule,RouterModule.forChild( DashboardRoutes ),FormsModule, CdkTableModule,\r\n      MatSelectModule, MatTabsModule,  MatListModule, MatTableModule,\r\n      MatCardModule, MatFormFieldModule, MatInputModule, MatRippleModule,PreloaderModule,],\r\n    declarations: [ UserdashboardTemplateComponent ]\r\n})\r\n\r\nexport class UserDashboardModule {\r\n\r\n}\r\n","import { Routes } from '@angular/router';\r\nimport {UserdashboardTemplateComponent} from \"./userdashboard-template.component\";\r\n\r\n// import { TaskboardComponent } from './taskboard.component';\r\n\r\nexport const DashboardRoutes: Routes = [{\r\n    path: '',\r\n    component: UserdashboardTemplateComponent,\r\n    data: {\r\n        heading: 'Dashboard',\r\n        // removeFooter: true\r\n    }\r\n}];\r\n"],"sourceRoot":""}