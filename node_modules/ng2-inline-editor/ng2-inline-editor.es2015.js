import { Component, ComponentFactoryResolver, EventEmitter, Input, NgModule, Output, Renderer, ViewChild, ViewContainerRef, forwardRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';

/**
 * @abstract
 */
class InputBase {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        this.isNumeric = false;
        this.isRegexTestable = false;
    }
    /**
     * @param {?} _context
     * @return {?}
     */
    setContext(_context) {
        this.context = _context;
        this.whenContextIsReady();
    }
    /**
     * @return {?}
     */
    whenContextIsReady() { }
    /**
     * @return {?}
     */
    getPlaceholder() {
        return this.context.isEmpty ? this.context.empty : ((this.context.value));
    }
    /**
     * @return {?}
     */
    focus() {
        setTimeout(() => this.renderer.invokeElementMethod(this.inputElement, "focus", []));
    }
}

class InputNumberComponent extends InputBase {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super(renderer);
        this.isNumeric = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.inputElement = this.inputRef.nativeElement;
    }
}
InputNumberComponent.decorators = [
    { type: Component, args: [{
                selector: "inline-editor-number",
                styles: ["a {     text-decoration: none;     color: #428bca;     border-bottom: dashed 1px #428bca;     cursor: pointer;     line-height: 2;     margin-right: 5px;     margin-left: 5px; }   /* editable-empty */  .editable-empty, .editable-empty:hover, .editable-empty:focus, a.editable-empty, a.editable-empty:hover, a.editable-empty:focus {     font-style: italic;     color: #DD1144;     text-decoration: none; }  .inlineEditForm {     display: inline-block;     white-space: nowrap;     margin: 0; }  #inlineEditWrapper {     display: inline-block; }  .inlineEditForm input, select {     width: auto;     display: inline; }  .editInvalid {     color: #a94442;     margin-bottom: 0; }  .error {     border-color: #a94442; }  [hidden] {     display: none; }"],
                template: `<input #inputRef type="number" class="form-control" [(ngModel)]="context.value" [required]="context.required"
                      [disabled]="context.disabled" [name]="context.name" [placeholder]="context.placeholder" [size]="context.size"/>`,
            },] },
];
/**
 * @nocollapse
 */
InputNumberComponent.ctorParameters = () => [
    { type: Renderer, },
];
InputNumberComponent.propDecorators = {
    'inputRef': [{ type: ViewChild, args: ["inputRef",] },],
};

class InputTextComponent extends InputBase {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super(renderer);
        this.isRegexTestable = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.inputElement = this.inputRef.nativeElement;
    }
}
InputTextComponent.decorators = [
    { type: Component, args: [{
                selector: "inline-editor-text",
                styles: ["a {     text-decoration: none;     color: #428bca;     border-bottom: dashed 1px #428bca;     cursor: pointer;     line-height: 2;     margin-right: 5px;     margin-left: 5px; }   /* editable-empty */  .editable-empty, .editable-empty:hover, .editable-empty:focus, a.editable-empty, a.editable-empty:hover, a.editable-empty:focus {     font-style: italic;     color: #DD1144;     text-decoration: none; }  .inlineEditForm {     display: inline-block;     white-space: nowrap;     margin: 0; }  #inlineEditWrapper {     display: inline-block; }  .inlineEditForm input, select {     width: auto;     display: inline; }  .editInvalid {     color: #a94442;     margin-bottom: 0; }  .error {     border-color: #a94442; }  [hidden] {     display: none; }"],
                template: `<input #inputRef type="text" class="form-control" [(ngModel)]="context.value" [required]="context.required"
                      [disabled]="context.disabled" [name]="context.name" [placeholder]="context.placeholder" [size]="context.size"/>`,
            },] },
];
/**
 * @nocollapse
 */
InputTextComponent.ctorParameters = () => [
    { type: Renderer, },
];
InputTextComponent.propDecorators = {
    'inputRef': [{ type: ViewChild, args: ["inputRef",] },],
};

class InputPasswordComponent extends InputBase {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super(renderer);
        this.isRegexTestable = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.inputElement = this.inputRef.nativeElement;
    }
    /**
     * @return {?}
     */
    getPlaceholder() {
        return "*****";
    }
}
InputPasswordComponent.decorators = [
    { type: Component, args: [{
                selector: "inline-editor-password",
                styles: ["a {     text-decoration: none;     color: #428bca;     border-bottom: dashed 1px #428bca;     cursor: pointer;     line-height: 2;     margin-right: 5px;     margin-left: 5px; }   /* editable-empty */  .editable-empty, .editable-empty:hover, .editable-empty:focus, a.editable-empty, a.editable-empty:hover, a.editable-empty:focus {     font-style: italic;     color: #DD1144;     text-decoration: none; }  .inlineEditForm {     display: inline-block;     white-space: nowrap;     margin: 0; }  #inlineEditWrapper {     display: inline-block; }  .inlineEditForm input, select {     width: auto;     display: inline; }  .editInvalid {     color: #a94442;     margin-bottom: 0; }  .error {     border-color: #a94442; }  [hidden] {     display: none; }"],
                template: `<input #inputRef type="password" class="form-control" [(ngModel)]="context.value" [required]="context.required"
                      [disabled]="context.disabled" [name]="context.name" [placeholder]="context.placeholder" [size]="context.size"/>`,
            },] },
];
/**
 * @nocollapse
 */
InputPasswordComponent.ctorParameters = () => [
    { type: Renderer, },
];
InputPasswordComponent.propDecorators = {
    'inputRef': [{ type: ViewChild, args: ["inputRef",] },],
};

class InputRangeComponent extends InputBase {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super(renderer);
        this.isNumeric = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.inputElement = this.inputRef.nativeElement;
    }
}
InputRangeComponent.decorators = [
    { type: Component, args: [{
                selector: "inline-editor-range",
                styles: ["a {     text-decoration: none;     color: #428bca;     border-bottom: dashed 1px #428bca;     cursor: pointer;     line-height: 2;     margin-right: 5px;     margin-left: 5px; }   /* editable-empty */  .editable-empty, .editable-empty:hover, .editable-empty:focus, a.editable-empty, a.editable-empty:hover, a.editable-empty:focus {     font-style: italic;     color: #DD1144;     text-decoration: none; }  .inlineEditForm {     display: inline-block;     white-space: nowrap;     margin: 0; }  #inlineEditWrapper {     display: inline-block; }  .inlineEditForm input, select {     width: auto;     display: inline; }  .editInvalid {     color: #a94442;     margin-bottom: 0; }  .error {     border-color: #a94442; }  [hidden] {     display: none; }"],
                template: `<input #inputRef type="range" class="form-control" [(ngModel)]="context.value" [required]="context.required"
                      [disabled]="context.disabled" [name]="context.name" [placeholder]="context.placeholder"
                      [min]="context.min" [max]="context.max"/>`,
            },] },
];
/**
 * @nocollapse
 */
InputRangeComponent.ctorParameters = () => [
    { type: Renderer, },
];
InputRangeComponent.propDecorators = {
    'inputRef': [{ type: ViewChild, args: ["inputRef",] },],
};

class InputTextareaComponent extends InputBase {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super(renderer);
        this.isRegexTestable = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.inputElement = this.inputRef.nativeElement;
    }
}
InputTextareaComponent.decorators = [
    { type: Component, args: [{
                selector: "inline-editor-textarea",
                styles: ["a {     text-decoration: none;     color: #428bca;     border-bottom: dashed 1px #428bca;     cursor: pointer;     line-height: 2;     margin-right: 5px;     margin-left: 5px; }   /* editable-empty */  .editable-empty, .editable-empty:hover, .editable-empty:focus, a.editable-empty, a.editable-empty:hover, a.editable-empty:focus {     font-style: italic;     color: #DD1144;     text-decoration: none; }  .inlineEditForm {     display: inline-block;     white-space: nowrap;     margin: 0; }  #inlineEditWrapper {     display: inline-block; }  .inlineEditForm input, select {     width: auto;     display: inline; }  .editInvalid {     color: #a94442;     margin-bottom: 0; }  .error {     border-color: #a94442; }  [hidden] {     display: none; }"],
                template: `<textarea #inputRef class="form-control" [(ngModel)]="context.value" [required]="context.required"
                      [rows]="context.rows" [cols]="context.cols" [disabled]="context.disabled" [name]="context.name"
                      [placeholder]="context.placeholder"></textarea>`,
            },] },
];
/**
 * @nocollapse
 */
InputTextareaComponent.ctorParameters = () => [
    { type: Renderer, },
];
InputTextareaComponent.propDecorators = {
    'inputRef': [{ type: ViewChild, args: ["inputRef",] },],
};

class InputSelectComponent extends InputBase {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super(renderer);
    }
    /**
     * @return {?}
     */
    getPlaceholder() {
        return this.optionSelected();
    }
    /**
     * @return {?}
     */
    optionSelected() {
        let /** @type {?} */ selectedOptionText;
        const /** @type {?} */ options = this.context.options;
        if (options && options.data) {
            for (const /** @type {?} */ option of options.data) {
                selectedOptionText = this.getTextOfSelectedOption(option);
                if (selectedOptionText) {
                    break;
                }
            }
        }
        return selectedOptionText ? selectedOptionText : this.context.empty;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    getTextOfSelectedOption(options) {
        let /** @type {?} */ textOfSelectedOption;
        const { text, value } = ((this.context.options));
        if (options.children) {
            for (const /** @type {?} */ child of options.children) {
                textOfSelectedOption = this.getTextOfSelectedOption(child);
                if (textOfSelectedOption) {
                    break;
                }
            }
        }
        else {
            // tslint:disable-next-line:triple-equals
            if (options[value] == this.context.value) {
                textOfSelectedOption = options[text];
            }
        }
        return textOfSelectedOption;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.inputElement = this.inputRef.nativeElement;
    }
}
InputSelectComponent.decorators = [
    { type: Component, args: [{
                selector: "inline-editor-select",
                styles: ["a {     text-decoration: none;     color: #428bca;     border-bottom: dashed 1px #428bca;     cursor: pointer;     line-height: 2;     margin-right: 5px;     margin-left: 5px; }   /* editable-empty */  .editable-empty, .editable-empty:hover, .editable-empty:focus, a.editable-empty, a.editable-empty:hover, a.editable-empty:focus {     font-style: italic;     color: #DD1144;     text-decoration: none; }  .inlineEditForm {     display: inline-block;     white-space: nowrap;     margin: 0; }  #inlineEditWrapper {     display: inline-block; }  .inlineEditForm input, select {     width: auto;     display: inline; }  .editInvalid {     color: #a94442;     margin-bottom: 0; }  .error {     border-color: #a94442; }  [hidden] {     display: none; }"],
                template: `
    <select #inputRef class="form-control" [(ngModel)]="context.value">
        <ng-template ngFor let-option [ngForOf]="context.options.data">
            <optgroup *ngIf="option.children" [label]="option[context.options.text]">
                <option *ngFor="let child of option.children" [value]="child[context.options.value]">
                    {{child[context.options.text]}}
                </option>
            </optgroup>
            <option *ngIf="!option.children" [value]="option[context.options.value]">{{option[context.options.text]}}</option>
        </ng-template>
    </select>
            `,
            },] },
];
/**
 * @nocollapse
 */
InputSelectComponent.ctorParameters = () => [
    { type: Renderer, },
];
InputSelectComponent.propDecorators = {
    'inputRef': [{ type: ViewChild, args: ["inputRef",] },],
};

class InputDateComponent extends InputBase {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super(renderer);
        this.isRegexTestable = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.inputElement = this.inputRef.nativeElement;
    }
}
InputDateComponent.decorators = [
    { type: Component, args: [{
                selector: "inline-editor-date",
                styles: ["a {     text-decoration: none;     color: #428bca;     border-bottom: dashed 1px #428bca;     cursor: pointer;     line-height: 2;     margin-right: 5px;     margin-left: 5px; }   /* editable-empty */  .editable-empty, .editable-empty:hover, .editable-empty:focus, a.editable-empty, a.editable-empty:hover, a.editable-empty:focus {     font-style: italic;     color: #DD1144;     text-decoration: none; }  .inlineEditForm {     display: inline-block;     white-space: nowrap;     margin: 0; }  #inlineEditWrapper {     display: inline-block; }  .inlineEditForm input, select {     width: auto;     display: inline; }  .editInvalid {     color: #a94442;     margin-bottom: 0; }  .error {     border-color: #a94442; }  [hidden] {     display: none; }"],
                template: `<input #inputRef type="date" class="form-control" [(ngModel)]="context.value" [required]="context.required"
                      [disabled]="context.disabled" [name]="context.name" [placeholder]="context.placeholder" [size]="context.size"
                      [min]="context.min" [max]="context.max"/>`,
            },] },
];
/**
 * @nocollapse
 */
InputDateComponent.ctorParameters = () => [
    { type: Renderer, },
];
InputDateComponent.propDecorators = {
    'inputRef': [{ type: ViewChild, args: ["inputRef",] },],
};

class InputTimeComponent extends InputBase {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super(renderer);
        this.isRegexTestable = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.inputElement = this.inputRef.nativeElement;
    }
}
InputTimeComponent.decorators = [
    { type: Component, args: [{
                selector: "inline-editor-time",
                styles: ["a {     text-decoration: none;     color: #428bca;     border-bottom: dashed 1px #428bca;     cursor: pointer;     line-height: 2;     margin-right: 5px;     margin-left: 5px; }   /* editable-empty */  .editable-empty, .editable-empty:hover, .editable-empty:focus, a.editable-empty, a.editable-empty:hover, a.editable-empty:focus {     font-style: italic;     color: #DD1144;     text-decoration: none; }  .inlineEditForm {     display: inline-block;     white-space: nowrap;     margin: 0; }  #inlineEditWrapper {     display: inline-block; }  .inlineEditForm input, select {     width: auto;     display: inline; }  .editInvalid {     color: #a94442;     margin-bottom: 0; }  .error {     border-color: #a94442; }  [hidden] {     display: none; }"],
                template: `<input #inputRef type="time" class="form-control" [(ngModel)]="context.value" [required]="context.required"
                      [disabled]="context.disabled" [name]="context.name" [placeholder]="context.placeholder" [size]="context.size"
                      [min]="context.min" [max]="context.max"/>`,
            },] },
];
/**
 * @nocollapse
 */
InputTimeComponent.ctorParameters = () => [
    { type: Renderer, },
];
InputTimeComponent.propDecorators = {
    'inputRef': [{ type: ViewChild, args: ["inputRef",] },],
};

class InputDateTimeComponent extends InputBase {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super(renderer);
        this.isRegexTestable = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.inputElement = this.inputRef.nativeElement;
    }
}
InputDateTimeComponent.decorators = [
    { type: Component, args: [{
                selector: "inline-editor-datetime",
                styles: ["a {     text-decoration: none;     color: #428bca;     border-bottom: dashed 1px #428bca;     cursor: pointer;     line-height: 2;     margin-right: 5px;     margin-left: 5px; }   /* editable-empty */  .editable-empty, .editable-empty:hover, .editable-empty:focus, a.editable-empty, a.editable-empty:hover, a.editable-empty:focus {     font-style: italic;     color: #DD1144;     text-decoration: none; }  .inlineEditForm {     display: inline-block;     white-space: nowrap;     margin: 0; }  #inlineEditWrapper {     display: inline-block; }  .inlineEditForm input, select {     width: auto;     display: inline; }  .editInvalid {     color: #a94442;     margin-bottom: 0; }  .error {     border-color: #a94442; }  [hidden] {     display: none; }"],
                template: `<input #inputRef type="datetime-local" class="form-control" [(ngModel)]="context.value" [required]="context.required"
                      [disabled]="context.disabled" [name]="context.name" [placeholder]="context.placeholder" [size]="context.size"
                      [min]="context.min" [max]="context.max"/>`,
            },] },
];
/**
 * @nocollapse
 */
InputDateTimeComponent.ctorParameters = () => [
    { type: Renderer, },
];
InputDateTimeComponent.propDecorators = {
    'inputRef': [{ type: ViewChild, args: ["inputRef",] },],
};

const InputComponets = [
    InputTextComponent,
    InputNumberComponent,
    InputPasswordComponent,
    InputRangeComponent,
    InputTextareaComponent,
    InputSelectComponent,
    InputDateComponent,
    InputTimeComponent,
    InputDateTimeComponent,
];
// TO-DO Default's value
const inputConfig = {
    options: {
        data: [],
        text: "text",
        value: "value",
    },
    empty: "empty",
    placeholder: "",
    type: "text",
    disabled: false,
    name: "",
    size: 8,
    min: 1,
    pattern: "",
    max: Infinity,
    /**
     * @return {?}
     */
    fnErrorLength() { alert("Error: Lenght!"); },
    /**
     * @return {?}
     */
    fnErrorPattern() { alert("Error: Pattern!"); },
};
class InlineEditorComponent {
    /**
     * @param {?} componentFactoryResolver
     */
    constructor(componentFactoryResolver) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.onSave = new EventEmitter();
        this.onEdit = new EventEmitter();
        this.onCancel = new EventEmitter();
        this.cols = 50;
        this.rows = 4;
        this.editing = false;
        this.isEmpty = false;
        this._value = "";
        this.preValue = "";
        this.components = {
            text: InputTextComponent,
            number: InputNumberComponent,
            password: InputPasswordComponent,
            range: InputRangeComponent,
            textarea: InputTextareaComponent,
            select: InputSelectComponent,
            date: InputDateComponent,
            time: InputTimeComponent,
            datetime: InputDateTimeComponent,
        };
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this._options = options instanceof Array ?
            {
                data: options,
                value: "value",
                text: "text",
            } : options;
    }
    /**
     * @return {?}
     */
    get options() { return this._options; }
    /**
     * @return {?}
     */
    get value() { return this._value; }
    ;
    /**
     * @param {?} newValue
     * @return {?}
     */
    set value(newValue) {
        if (newValue !== this._value) {
            this._value = newValue;
            this.onChange(newValue);
        }
    }
    /**
     * @param {?} typeName
     * @return {?}
     */
    getComponentType(typeName) {
        const /** @type {?} */ type = this.components[typeName];
        if (!type) {
            throw new Error("That type does not exist or it is not implemented yet!");
        }
        return type;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.type) {
            this.initializeProperties();
            this.generateComponent(this.type);
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    generateComponent(type) {
        const /** @type {?} */ componentType = this.getComponentType(type);
        this.inputInstance = this.createInputInstance(componentType);
        this.inputInstance.setContext(this);
    }
    /**
     * @param {?} componentType
     * @return {?}
     */
    createInputInstance(componentType) {
        const /** @type {?} */ factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        this.componentRef = this.container.createComponent(factory);
        return (this.componentRef.instance);
    }
    /**
     * @return {?}
     */
    initializeProperties() {
        this.initProperty("type");
        this.initProperty("disabled");
        this.initProperty("placeholder");
        this.initProperty("empty");
        this.initProperty("name");
        this.initProperty("size");
        this.initProperty("min");
        this.initProperty("max");
        this.initProperty("pattern");
        this.initProperty("options");
        this.initProperty("fnErrorLength");
        this.initProperty("fnErrorPattern");
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value == null) {
            this.isEmpty = true;
        }
        else {
            this.value = value;
            this.isEmpty = false;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) { this.onChange = fn; }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { this.onTouched = fn; }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    edit(value) {
        this.preValue = value; // Store original value in case the form is cancelled
        this.editing = true;
        this.inputInstance.focus();
        this.onEdit.emit(this);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onSubmit(value) {
        if (this.pattern && this.inputInstance.isRegexTestable && !new RegExp(this.pattern).test(value)) {
            return this.fnErrorPattern();
        }
        const /** @type {?} */ length = this.inputInstance.isNumeric ? Number(value) : value.length;
        if (length < this.min || length > this.max) {
            return this.fnErrorLength();
        }
        this.onSave.emit(value);
        this.editing = false;
        this.isEmpty = false;
    }
    /**
     * @return {?}
     */
    cancel() {
        this.value = this.preValue;
        this.editing = false;
        this.onCancel.emit(this);
    }
    /**
     * @param {?} property
     * @return {?}
     */
    initProperty(property) {
        this[property] = typeof this[property] !== "undefined"
            ? this[property]
            : inputConfig[property];
    }
    /**
     * @return {?}
     */
    showText() {
        return this.inputInstance ? this.inputInstance.getPlaceholder() : "Loading...";
    }
}
InlineEditorComponent.decorators = [
    { type: Component, args: [{
                selector: "inline-editor",
                template: "<div>   <div id=\"inlineEditWrapper\">     <a [ngClass]=\"{'editable-empty': isEmpty, 'c-inline-editor' :true }\" (click)=\"edit(value)\" [hidden]=\"editing && !disabled\">{{ showText() }}</a>     <div class=\"c-inline-editor inlineEditForm form-inline\" [hidden]=\"!editing || disabled\">       <div class=\"form-group\">         <div #container></div>         <span class=\"c-inline-editor inline-editor-button-group\">          <button id=\"inline-editor-button-save\" class=\"btn btn-xs btn-primary c-inline-editor\"             (click)=\"onSubmit(value)\"><span class=\"fa fa-check\"></span></button>         <button class=\"btn btn-xs btn-danger c-inline-editor\" (click)=\"cancel()\"><span class=\"fa fa-remove\"></span> </button>         </span>        </div>     </div>   </div> </div>",
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => InlineEditorComponent),
                        multi: true,
                    }],
                entryComponents: InputComponets,
            },] },
];
/**
 * @nocollapse
 */
InlineEditorComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver, },
];
InlineEditorComponent.propDecorators = {
    'type': [{ type: Input },],
    'onSave': [{ type: Output },],
    'onEdit': [{ type: Output },],
    'onCancel': [{ type: Output },],
    'empty': [{ type: Input },],
    'disabled': [{ type: Input },],
    'required': [{ type: Input },],
    'placeholder': [{ type: Input },],
    'name': [{ type: Input },],
    'size': [{ type: Input },],
    'min': [{ type: Input },],
    'max': [{ type: Input },],
    'pattern': [{ type: Input },],
    'fnErrorLength': [{ type: Input },],
    'fnErrorPattern': [{ type: Input },],
    'cols': [{ type: Input },],
    'rows': [{ type: Input },],
    'options': [{ type: Input },],
    'container': [{ type: ViewChild, args: ["container", { read: ViewContainerRef },] },],
};

class InlineEditorModule {
}
InlineEditorModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule],
                declarations: [InlineEditorComponent, ...InputComponets],
                exports: [InlineEditorComponent],
            },] },
];
/**
 * @nocollapse
 */
InlineEditorModule.ctorParameters = () => [];

export { InlineEditorModule, InputComponets, InlineEditorComponent, InputDateTimeComponent, InputDateComponent, InputNumberComponent, InputPasswordComponent, InputRangeComponent, InputSelectComponent, InputTextComponent, InputTextareaComponent, InputTimeComponent, InputBase };
